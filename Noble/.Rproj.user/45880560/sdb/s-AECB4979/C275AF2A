{
    "collab_server" : "",
    "contents" : "############################################################################################\n#' @title  Downloads and performs process quality checks on NEON data\n\n#' @author Robert Lee \\email{rlee@battelleecology.org}\\cr\n\n#' @description For the specified dates, site, variables, and data product or name of family of data products,\n#' data are downloaded and saved to the specifed directory. Process quality calculations are then performed and written to a results file in save.dir.\n#'\n#' @param \\code{site} Parameter of class character. The NEON site data should be downloaded for.\n#' @param \\code{dpID} Parameter of class character. The name of the data product to pull data, or a\n#' keyword for a family of data products, e.g. \"wind\" will pull for 2D and 3D wind data products.\n#' @param \\code{prin.vars} The principle variables to test (variable names, such as 'windSpeed'). Omit the term 'Mean'.\n#' @param \\code{bgn.month} Parameter of class character. The year-month (e.g. \"2017-01\") of the first month to get data for.\n#' @param \\code{end.month} Parameter of class character. The year-month (e.g. \"2017-01\") of the last month to get data for.\n#' @param \\code{time.agr} Parameter of class numeric. The data agregation interval requested, must be 1, 2, or 30.\n#' @param \\code{package} Parameter of class character. Optional. The type of data package to be returned If not specified, defaults to basic.\n#' @param \\code{save.dir} Parameter of class character. The local directory where data files should be saved.\n#'\n#' @return Writes data files to the specified directory.\n\n#' @keywords process quality, data quality, gaps, commissioning\n\n#' @examples\n#' site = \"CPER\"\n#' dpID = \"DP1.00001.001\"\n#' prin.vars<-c(\"windSpeed\", \"windDir\")\n#' bgn.month = \"2017-05\"\n#' end.month = \"2017-06\"\n#' time.agr = 30\n#' package=\"basic\"\n#' save.dir<-\"/Users/rlee/Dropbox/GitHub/Commissioning-TIS-rhlee12/Tis2DWindPQ_test\"\n#' Noble::tis.pq.test(site = site, dpID = dpID, bgn.month = bgn.month, end.month = end.month,\n#' time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)\n\n#'\n#' @seealso Currently none\n\n#' @export\n\n# changelog and author contributions / copyrights\n#   Robert Lee (2017-07-20)\n#     original creation\n#\n##############################################################################################\n\n\ntis.pq.test<-function(site = \"CPER\", dpID = \"DP1.00001.001\", prin.vars,  bgn.month = \"2017-05\", end.month = \"2017-06\", time.agr = 30, package=\"basic\", save.dir, q.th=95, v.th=90){\n\n    quant_threshold=q.th\n    valid_threshold=v.th\n\n    if(missing(q.th)){\n        q.th=95\n        quant_threshold=q.th\n    }\n    if(missing(v.th)){\n        v.th=90\n    valid_threshold=v.th\n    }\n\n\n    domn=Noble::tis_site_config$Domain[which(Noble::tis_site_config$SiteID==site)]\n    site.dir=paste0(save.dir, \"/\", domn, \"-\", site, \"/\")\n\n    if(!dir.exists(site.dir)){\n        dir.create(site.dir)\n    }\n\n    test.data<-Noble::data.pull(site = site, dpID = dpID, bgn.month = bgn.month, end.month = end.month, time.agr = time.agr, package=package, save.dir=site.dir)\n\n    for(i in 1:length(prin.vars)){\n        data.indx<-grep(x=colnames(test.data), pattern=paste0(\"^\", prin.vars[i], \"Mean*\"))\n\n        qf.indx<-grep(x=colnames(test.data), pattern=paste0(\"^\", prin.vars[i], \"FinalQF*\"))\n        qf.indx<-append(qf.indx, grep(x=colnames(test.data), pattern=\"^finalQF*\"))\n\n        if(prin.vars[i]==\"inSW\"){\n            data.indx=data.indx[-which(grepl(x=colnames(test.data[,data.indx]), pattern = \"003.000\"))]\n            qf.indx=qf.indx[-which(grepl(x=colnames(test.data[,qf.indx]), pattern = \"003.000\"))]\n        }\n        #special case for precip\n        if(prin.vars[i]==\"priPrecipBulk\"){\n            data.indx<-grep(x=colnames(test.data), pattern=paste0(\"^\", prin.vars[i]))\n            qf.indx<-grep(x=colnames(test.data), pattern=(\"FinalQF\"), ignore.case = T)\n        }\n\n\n        bgn.day=as.Date(paste0(bgn.month, \"-01\"))\n        end.day=Noble::end.day.time(end.month = end.month, time.agr = 1440)\n        end.day=as.POSIXct(end.day)\n\n\n        days=round(difftime(end.day, bgn.day, units=\"days\"), digits = 2)\n        end.day=lubridate::round_date(end.day, \"day\")\n\n        pq.data<-test.data[,data.indx]\n        qf.data<-test.data[,qf.indx]\n\n        num.nas<-sum(is.na(pq.data))\n        num.data<-sum(!is.na(pq.data))\n\n        data.quant<-round(100*(num.data/(num.nas+num.data)), digits = 2)\n\n        num.qf.fail<-sum(qf.data==1, na.rm=TRUE)\n        num.qf.pass<-sum(qf.data==0, na.rm = TRUE)\n        num.qf.na<-sum(is.na(qf.data))\n\n        data.valid<-round(100*(num.qf.pass/(num.qf.pass+num.qf.fail+num.qf.na)), digits = 2)\n\n\n#Set passing thresholds, based on var tested. Add to this area as functions or conditions are added\n        ## direct radiation has an ATBD implementation error- revert to full thresholds.\n        # if(prin.vars[i]==\"dirRad\"){\n        #     #direct and diffuse caluculated values\n        #     quant_threshold=Noble::dirRad.threshold(site = site, bgn.month = bgn.month, end.month = end.month, excuse = 5)\n        #     valid_threshold=Noble::dirRad.threshold(site = site, bgn.month = bgn.month, end.month = end.month, excuse = 10)\n        #}\n    if(prin.vars[i]==\"SHF\"){\n            #Soil heat flux specific values\n            quant_threshold=95\n            valid_threshold=(90-15.38)\n        }\n        if(prin.vars[i]==\"soilTemp\"){\n            quant_threshold=94.6\n            valid_threshold=89.87\n        }\n\n\n        dq.rslt<-data.frame(site, time_performed=as.character(Sys.time()), begin_month=bgn.month, end_month=end.month, days_tested=days, data_product= dpID, variable_tested=prin.vars[i], data_quantity=data.quant, data_validity=data.valid, quant_threshold= quant_threshold, valid_threshold=valid_threshold)\n\n        rslt.dir=paste0(save.dir, \"/\", \"Common/\")\n        if(!dir.exists(rslt.dir)){\n            dir.create(rslt.dir)\n        }\n\n        if(file.exists(paste(rslt.dir,\"results.csv\",sep = \"/\"))){\n            dq.rpt <- read.csv(file = paste(rslt.dir,\"results.csv\",sep = \"/\"), header = T, stringsAsFactors = T)\n            dq.rpt <- rbind(dq.rpt, dq.rslt)\n            write.csv(x = dq.rpt, file = paste(rslt.dir,\"results.csv\",sep = \"/\"), row.names = F)\n        }\n        else{\n            write.csv(x = dq.rslt, file = paste(rslt.dir,\"results.csv\",sep = \"/\"), col.names = T, row.names = F)\n        }\n\n\n    }\n}\n",
    "created" : 1508946345221.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4235231339",
    "id" : "C275AF2A",
    "lastKnownWriteTime" : 1508438006,
    "last_content_update" : 1508438006,
    "path" : "~/Dropbox/GitHub/Noble-Package/Noble/R/tis_pq_test.R",
    "project_path" : "R/tis_pq_test.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}