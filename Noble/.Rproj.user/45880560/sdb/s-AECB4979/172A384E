{
    "collab_server" : "",
    "contents" : "#Test Block\nsite=\"HARV\"\n\nbgn.month=\"2017-06\"\nend.month=\"2017-07\"\n\ntest = \"TIS Radiation Data Quality \"\ntestSubDir = \"TisRadiationDataQuality\"\nif(grepl(\"darwin\", version$os))\n{\n    mountPoint<-\"/Volumes/neon/\" #Mac\n}else{\n    mountPoint<-\"N:/\" #Windows\n}\ndirCommBase = paste0(mountPoint, \"Science/Science Commissioning Archive/SiteAndPayload/\")\ntestFullDir=paste0(dirCommBase, testSubDir, \"/\")\nsave.dir=testFullDir\n\n\n\n\n\n## Function start\nrad.dq.test=function(site, save.dir, bgn.month, end.month){\n    ########### GENERAL PARAMETERS ###########\n    #Define directories\n    domn=Noble::is_site_config$Domain[Noble::is_site_config$SiteID==site]\n    site.dir=paste0(save.dir, \"/\", domn, \"-\", site, \"/\")\n\n    rslt.dir=paste0(save.dir, \"/\", \"Common/\")\n    if(!dir.exists(rslt.dir)){\n        dir.create(rslt.dir)\n    }\n\n\n    #set up DP info\n    test.dpIDs=c(\"DP1.00014.001\",\n                 \"DP1.00023.001\",\n                 \"DP1.00024.001\",\n                 \"DP1.00066.001\"\n    )\n    # Add in Primary Pyranometer if Core site\n    if(Noble::tis_site_config$Core.Relocatable[Noble::tis_site_config$SiteID==site]==\"Core\"){test.dpIDs=c(test.dpIDs, \"DP1.00022.001\")}\n\n\n\n    ########### VARIANCE TESTING ###########\n    ######## ALL AVAILABLE RAD DATA ########\n\n    # First week start\n    frst.week=c(as.Date(paste0(bgn.month, \"-01\")), day1.week1+7)\n    last.week=c(as.Date(Noble::end.day.time(end.month = end.month, time.agr = 1))-7, as.Date(Noble::end.day.time(end.month = end.month, time.agr = 1)))\n\n    # Pull and refine data to vairance fields only\n    raw.var.data=lapply(test.dpIDs, function(x)\n        try(Noble::data.pull(site = site,\n                             dpID = x,\n                             bgn.month = bgn.month,\n                             end.month = end.month,\n                             time.agr = 30,\n                             package = \"basic\",\n                             save.dir = site.dir)\n        )\n    )\n    #Put into massive data frame\n    var.data=do.call(cbind, raw.var.data)\n    var.data=data.frame(startDateTime=var.data[,1], var.data[,grepl(pattern = \"variance\", x = colnames(var.data), ignore.case = T)])\n    var.data=var.data[,-which(grepl(pattern = \"*LW*\", x = colnames(var.data)))]\n\n    # Convert to local time\n    time.zone=Noble::tis_site_config$Time.Zone[Noble::tis_site_config$SiteID==site]\n    var.data$startDateTime=as.POSIXct(var.data$startDateTime, tz=\"UTC\")\n    var.data$startDateTime=as.POSIXct(format(var.data$startDateTime, tz=time.zone, usetz = T), tz=time.zone, usetz = T)\n\n    #subset to first and last weeks\n    first.pop=var.data[frst.week[2]>var.data$startDateTime&var.data$startDateTime>=frst.week[1],]\n    last.pop=var.data[last.week[2]>var.data$startDateTime&var.data$startDateTime>=last.week[1],]\n\n    #Subset to nightime conditions\n    test.time = c(\"00:00:00\", \"00:30:00\", \"01:00:00\", \"01:30:00\", \"02:00:00\", \"02:30:00\", \"03:00:00\",\n                  \"03:30:00\", \"04:00:00\")\n    first.pop=first.pop[which(strftime(first.pop$startDateTime, format=\"%H:%M:%S\", tz=time.zone) %in% test.time),]\n    last.pop=last.pop[which(strftime(last.pop$startDateTime, format=\"%H:%M:%S\", tz=time.zone) %in% test.time),]\n\n    ## Remove all NAs, do this after subsetting to nightime conditions\n    first.pop=first.pop[,-which(colSums(is.na(first.pop))==length(first.pop[,1]))]\n    last.pop=last.pop[,-which(colSums(is.na(last.pop))==length(last.pop[,1]))]\n\n    f.test=stats::var.test(unlist(as.list(first.pop[,(2:length(colnames(first.pop)))])),# ------>f.test results####\n                           unlist(as.list(last.pop[,(2:length(colnames(last.pop)))])))\n\n\n    ########### INTERNAL CONSISTENCY ###########\n    ########### PAR and QL PAR ONLY ############\n    site.MLs=1:Noble::tis_site_config$Num.of.MLs[Noble::tis_site_config$SiteID==site]\n    if(Noble::rad_dq_info$classification[Noble::rad_dq_info$site==site]==\"forest\"){rho.TH=.65}else{rho.TH=.9}\n\n    PAR.pairwise=lapply(site.MLs[-1], function(x) c(x-1, x))\n    QL.PAR.pairwise=list(c(1,2), c(2,3))\n\n    PAR=try(Noble::data.pull(site = site,\n                             dpID = \"DP1.00024.001\",\n                             bgn.month = bgn.month,\n                             end.month = end.month,\n                             time.agr = 30,\n                             package = \"basic\",\n                             save.dir = site.dir)\n    )\n    QL.PAR=try(Noble::data.pull(site = site,\n                                dpID = \"DP1.00066.001\",\n                                bgn.month = bgn.month,\n                                end.month = end.month,\n                                time.agr = 30,\n                                package = \"basic\",\n                                save.dir = site.dir)\n    )\n\n    PAR=PAR[,grepl(pattern = \"^PARMean\", x = colnames(PAR))]\n    QL.PAR=QL.PAR[,grepl(pattern = \"linePARMean\", x = colnames(QL.PAR))]\n\n    PAR.rho=unlist(lapply(PAR.pairwise, function(x) cor.test(PAR[,x[1]], PAR[,x[2]], method = \"spearman\")$estimate))\n    QL.PAR.rho= unlist(lapply(QL.PAR.pairwise, function(x) cor.test(QL.PAR[,x[1]], QL.PAR[,x[2]], method = \"spearman\")$estimate))\n\n    names(PAR.rho)=paste0(\"PAR-\", PAR.pairwise)\n    names(QL.PAR.rho)=c(\"QL PAR 1-3\", \"QL PAR 3-5\")\n\n    if(any(PAR.rho<rho.TH)==F){PAR.rho.test=\"Pass\"}else{PAR.rho.test=\"Fail\"} # ------>PAR rho results####\n    if(any(QL.PAR.rho<rho.TH)==F){QL.PAR.rho.test=\"Pass\"}else{QL.PAR.rho.test=\"Fail\"} # ------>QL PAR rho results####\n    raw.stats=data.frame(rho.estimate=append(PAR.rho, QL.PAR.rho))\n\n    ########## WRITE TO RAW STATS FILE ##########\n\n    write.csv(x = raw.stats, file = paste(site.dir,\"rawStats.csv\",sep = \"/\"), col.names = T, row.names = F)\n\n    ########### TOWER-TOP CONSISTENCY ###########\n    ########### Direct & Diffuse ONLY ###########\n\n    DirDif=try(Noble::data.pull(site = site,\n                                dpID = \"DP1.00014.001\",\n                                bgn.month = bgn.month,\n                                end.month = end.month,\n                                time.agr = 30,\n                                package = \"basic\",\n                                save.dir = site.dir)\n    )\n\n    DirDif=data.frame(startDateTime=DirDif[,1],\n                      dirRadMean=DirDif[,grepl(colnames(DirDif), pattern = \"dirRadMean\")],\n                      difRadMean=DirDif[,grepl(colnames(DirDif), pattern = \"difRadMean\")],\n                      gloRadMean=DirDif[,grepl(colnames(DirDif), pattern = \"gloRadMean\")]\n    )\n\n    # Sum up the direct and diffuse rad\n    DirDif$total=DirDif$dirRadMean+DirDif$difRadMean\n\n    # Convert to local time\n    time.zone=Noble::tis_site_config$Time.Zone[Noble::tis_site_config$SiteID==site]\n    DirDif$startDateTime=as.POSIXct(DirDif$startDateTime, tz=\"UTC\")\n    DirDif$startDateTime=as.POSIXct(format(DirDif$startDateTime, tz=time.zone, usetz = T), tz=time.zone, usetz = T)\n\n    #Only rows with greater than 5 W/m^2 get tested\n    DirDif=DirDif[which(DirDif$total>50),]\n\n    DirDif$SZA=RAtmosphere::SZA(timein = DirDif$startDateTime,\n                                Lat = Noble::tis_site_config$Latitude[Noble::tis_site_config$SiteID==site],\n                                Lon = Noble::tis_site_config$Longitude[Noble::tis_site_config$SiteID==site]\n    )\n\n    #Ratio is within ±8% for solar zenith angle < 75°\n    set1=DirDif[which(DirDif$SZA<75),]\n    ratio1=sum(DirDif$total)/sum(DirDif$gloRadMean)\n\n    # b. Ratio is within ±15% for 93° > solar zenith angle > 75°\n    set2=DirDif[which(DirDif$SZA>75&&DirDif$SZA<93),]\n\n    ########### WRITE TO RESULTS FILE ###########\n\n    if(file.exists(paste(rslt.dir,\"results.csv\",sep = \"/\"))){\n        dq.rpt <- read.csv(file = paste(rslt.dir,\"results.csv\",sep = \"/\"), header = T, stringsAsFactors = T)\n        dq.rpt <- rbind(dq.rpt, dq.rslt)\n        write.csv(x = dq.rpt, file = paste(rslt.dir,\"results.csv\",sep = \"/\"), row.names = F)\n    }\n    else{\n        write.csv(x = dq.rslt, file = paste(rslt.dir,\"results.csv\",sep = \"/\"), col.names = T, row.names = F)\n    }\n\n\n\n}\n",
    "created" : 1508946225454.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3454558499",
    "id" : "172A384E",
    "lastKnownWriteTime" : 1508946238,
    "last_content_update" : 1508946238329,
    "path" : "~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R",
    "project_path" : "R/rad_dq_test.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}