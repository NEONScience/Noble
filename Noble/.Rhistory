sink=lapply(tis_test_sites, function(x) try(Noble::fan.test(site=x, bgn.month = bgn.month, end.month = end.month, save.dir = SCA)))
rm(sink)
bgn.month
bgn.month="2017-07"
end.month="2017-08"
dpID="DP1.00006.001"
site="HARV"
time.agr=30
package="basic"
bgn_temp <- as.Date(paste0(bgn.month, "-01"), tz="UTC")
end_temp <- as.Date(paste0(end.month, "-01"), tz="UTC")
date_range<-substr(seq.Date(bgn_temp, end_temp, "month"), 0, 7)
site_meta=read_json(paste0("http://data.neonscience.org/api/v0/sites/", site))$data
prod_meta=read_json(paste0("http://data.neonscience.org/api/v0/products/", dpID))$data
site_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/sites/", site))$data
prod_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/products/", dpID))$data
site_indx=grep(prod_meta$siteCodes, pattern = site)
if(length(site_indx)==0){
stop(paste0(dpID, " is not currently available at ", site, " via the API."))
}
site_options=data.frame(avail_months=unlist(prod_meta$siteCodes[[site_indx]]$availableMonths), urls=unlist(prod_meta$siteCodes[[site_indx]]$availableDataUrls))
if(length(site_options$avail_months)==0){stop(paste0(dpID, " is missing at ", site))}
all_data_urls <- unlist(unique(site_options$urls))
url_index<-lapply(date_range, function(x) grep(pattern=x, all_data_urls))
temp_data_urls<-all_data_urls[unlist(url_index)]
temp_data_urls
api_data<-(lapply(temp_data_urls, function(x) jsonlite::read_json(path = x)))
i<-1
for(i in 1:length(api_data)){
tempList<-api_data[[i]]$data$files
listLeng<-length(tempList)
if(listLeng==0){break()}
for(j in 1:listLeng){
url_list<-append(url_list, tempList[[j]]$url)
}
}
url_list<-c()
i<-1
for(i in 1:length(api_data)){
tempList<-api_data[[i]]$data$files
listLeng<-length(tempList)
if(listLeng==0){break()}
for(j in 1:listLeng){
url_list<-append(url_list, tempList[[j]]$url)
}
}
url_list=url_list[(!grepl(pattern = "xml", x= url_list))]
exceptions=c("DP1.00005.001", "DP1.00041.001")
url_list=url_list[grepl(pattern = paste0(time.agr,"*min*"), x= url_list)|grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
loc_list_temp=stringr::str_extract(string=url_list, pattern = paste0(dpID, "\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d"))
loc_list=stringr::str_sub(loc_list_temp, start = 15, end = 21)
if(all(is.na(loc_list_temp))){
loc_list_temp=stringr::str_extract(string=url_list, pattern ="\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d")
loc_list=stringr::str_sub(loc_list_temp, start = 1, end = 8)
}
dp_list<-rep(dpID, times=length(loc_list))
call.df<-as.data.frame(cbind(url_list, dp_list, loc_list))
call.df<-call.df[order(call.df$dp_list, call.df$url_list),]
call.df=call.df[which(grepl(x=call.df$url_list, pattern=package)),] #Keep only our package type
call.df=call.df[which(grepl(x=call.df$url_list, pattern="\\.csv")),] #Keep only CSVs
call.df=call.df[which(!grepl(x=call.df$url_list, pattern="variables")),] #weed out varaible tables
return(call.df)
View(call.df)
read.csv(call.df$url_list[2])
Noble::data.pull()
library(Noble)
Noble::data.pull(site = "HARV", dpID = "DP1.00006.001", bgn.month = "2017-07", end.month = "2017-08", time.agr = 30, package = "basic", save.dir = tempdir())
Out=Noble::data.pull(site = "HARV", dpID = "DP1.00006.001", bgn.month = "2017-07", end.month = "2017-08", time.agr = 30, package = "basic", save.dir = tempdir())
View(Out)
Out=Noble::data.pull(site = "HARV", dpID = "DP1.00006.001", bgn.month = "2017-07", end.month = "2017-08", time.agr = 5, package = "basic", save.dir = tempdir())
Out
View(Out)
Out=Noble::data.pull(site = "HARV", dpID = "DP1.00006.001", bgn.month = "2017-07", end.month = "2017-08", time.agr = 5, package = "basic", save.dir = tempdir())
bgn.month="2017-07"
bgn.month="2017-07"
end.month="2017-07"
end.month="2017-08"
dpID="DP1.00006.001"
package="basic"
site="HARV"
time.agr=5
bgn_temp <- as.Date(paste0(bgn.month, "-01"), tz="UTC")
end_temp <- as.Date(paste0(end.month, "-01"), tz="UTC")
date_range<-substr(seq.Date(bgn_temp, end_temp, "month"), 0, 7)
site_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/sites/", site))$data
prod_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/products/", dpID))$data
site_indx=grep(prod_meta$siteCodes, pattern = site)
if(length(site_indx)==0){
stop(paste0(dpID, " is not currently available at ", site, " via the API."))
}
site_options=data.frame(avail_months=unlist(prod_meta$siteCodes[[site_indx]]$availableMonths), urls=unlist(prod_meta$siteCodes[[site_indx]]$availableDataUrls))
# Stop if no data
if(length(site_options$avail_months)==0){stop(paste0(dpID, " is missing at ", site))}
all_data_urls <- unlist(unique(site_options$urls))
#construct temporary API call urls
url_index<-lapply(date_range, function(x) grep(pattern=x, all_data_urls))
temp_data_urls<-all_data_urls[unlist(url_index)]
if(length(temp_data_urls)==0){stop("Data was missing in specified date range at ", site, ". Check ", dpID, " avalability with NEON.avail")}
#For found DPs, given the Kpi, pull hosted metadata via API
api_data<-(lapply(temp_data_urls, function(x) jsonlite::read_json(path = x)))
url_list<-c()
i<-1
for(i in 1:length(api_data)){
tempList<-api_data[[i]]$data$files
listLeng<-length(tempList)
if(listLeng==0){break()}
for(j in 1:listLeng){
url_list<-append(url_list, tempList[[j]]$url)
}
}
url_list=url_list[(!grepl(pattern = "xml", x= url_list))]
exceptions=c("DP1.00005.001", "DP1.00041.001")
if((dpID %in% exceptions)){ #Why, oh why does bio temp have to be different on the API
url_list<-url_list[grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}else{
url_list=url_list[grepl(pattern = paste0(time.agr,"*min*"), x= url_list)|grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}
url_list
loc_list_temp=stringr::str_extract(string=url_list, pattern = paste0(dpID, "\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d"))
url_list=url_list[(!grepl(pattern = "xml", x= url_list))]
exceptions=c("DP1.00005.001", "DP1.00041.001")
if((dpID %in% exceptions)){ #Why, oh why does bio temp have to be different on the API
url_list<-url_list[grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}else{
url_list=url_list[grepl(pattern = paste0(time.agr,"*min*"), x= url_list)|grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}
loc_list_temp=stringr::str_extract(string=url_list, pattern = paste0(dpID, "\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d"))
loc_list=stringr::str_sub(loc_list_temp, start = 15, end = 21)
if(all(is.na(loc_list_temp))){
loc_list_temp=stringr::str_extract(string=url_list, pattern ="\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d")
loc_list=stringr::str_sub(loc_list_temp, start = 1, end = 8)
}
dp_list<-rep(dpID, times=length(loc_list))
call.df<-as.data.frame(cbind(url_list, dp_list, loc_list))
call.df
bgn_temp <- as.Date(paste0(bgn.month, "-01"), tz="UTC")
end_temp <- as.Date(paste0(end.month, "-01"), tz="UTC")
date_range<-substr(seq.Date(bgn_temp, end_temp, "month"), 0, 7)
site_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/sites/", site))$data
prod_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/products/", dpID))$data
site_indx=grep(prod_meta$siteCodes, pattern = site)
if(length(site_indx)==0){
stop(paste0(dpID, " is not currently available at ", site, " via the API."))
}
site_options=data.frame(avail_months=unlist(prod_meta$siteCodes[[site_indx]]$availableMonths), urls=unlist(prod_meta$siteCodes[[site_indx]]$availableDataUrls))
# Stop if no data
if(length(site_options$avail_months)==0){stop(paste0(dpID, " is missing at ", site))}
all_data_urls <- unlist(unique(site_options$urls))
#construct temporary API call urls
url_index<-lapply(date_range, function(x) grep(pattern=x, all_data_urls))
temp_data_urls<-all_data_urls[unlist(url_index)]
if(length(temp_data_urls)==0){stop("Data was missing in specified date range at ", site, ". Check ", dpID, " avalability with NEON.avail")}
#For found DPs, given the Kpi, pull hosted metadata via API
api_data<-(lapply(temp_data_urls, function(x) jsonlite::read_json(path = x)))
url_list<-c()
i<-1
for(i in 1:length(api_data)){
tempList<-api_data[[i]]$data$files
listLeng<-length(tempList)
if(listLeng==0){break()}
for(j in 1:listLeng){
url_list<-append(url_list, tempList[[j]]$url)
}
}
url_list=url_list[(!grepl(pattern = "xml", x= url_list))]
exceptions=c("DP1.00005.001", "DP1.00041.001")
if((dpID %in% exceptions)){ #Why, oh why does bio temp have to be different on the API
url_list<-url_list[grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}else{
url_list=url_list[grepl(pattern = paste0(time.agr,"*min*"), x= url_list)|grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}
loc_list_temp=stringr::str_extract(string=url_list, pattern = paste0(dpID, "\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d"))
loc_list=stringr::str_sub(loc_list_temp, start = 15, end = 21)
if(all(is.na(loc_list_temp))){
loc_list_temp=stringr::str_extract(string=url_list, pattern ="\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d")
loc_list=stringr::str_sub(loc_list_temp, start = 1, end = 8)
}
grepl(pattern = paste0(time.agr, "_min*"), x= url_list)
grepl(pattern = paste0(time.agr,"*min*"), x= url_list)
library(Noble)
library(Noble)
View(Noble::tis_site_config)
Out
Noble:::.gen.call.df(bgn.month = "2017-07", end.month = "2017-07", site = "ONAQ", time.agr = 30, package = "basic", dpID = "DP1.00006.001")
list.files("/Users/rlee/Dropbox/GitHub/NEON-FIU-document-IPT/weather_summary_statistics/goldenData/golden/L1/")
library(Noble)
Noble::tis_pri_vars
data.field = Noble::tis_pri_vars$data.field[Noble::tis_pri_vars$dpID==dpID]
interactive(
)
dpID="djkdkl"
data.field = Noble::tis_pri_vars$data.field[Noble::tis_pri_vars$dpID==dpID]
data.field
interactive()&length(data.field)==0
?prompt
??input
?readline
if(interactive()&length(data.field)==0){
data.field = readline(prompt = "No valid data field found, please enter one: ")
}
library(Noble)
library(Noble)
if(grepl(pattern = "speed", data.field)){
QFindex <- grep(pattern = "windSpeedFinalQF\\.", colnames(commData), ignore.case = T)
}else if(grepl(pattern = "speed", data.field)){
QFindex <- grep(pattern = "windSpeedFinalQF\\.", colnames(commData), ignore.case = T)
}
library(Noble)
commData=read.csv("/Users/rlee/Dropbox/NEON/Commissioning/wind_plots/NEON.D01.BART.DP1.00001.001_REQ_2017-07-01_2017-08-31_30min_basic.csv.gz")
data.field="windDirMean"
dpID="DP1.00001.001"
QFindex <- grep(pattern = "*finalQF\\.", colnames(commData), ignore.case = T)
if(dpID=="DP1.00001.001"){
if(grepl(pattern = "speed", data.field)){
QFindex <- grep(pattern = "windSpeedFinalQF\\.", colnames(commData), ignore.case = T)
}else if(grepl(pattern = "speed", data.field)){
QFindex <- grep(pattern = "windDirFinalQF\\.", colnames(commData), ignore.case = T)
}
}
if(dpID=="DP1.00001.001"){
if(grepl(pattern = "speed", data.field, ignore.case = T)){
QFindex <- grep(pattern = "windSpeedFinalQF\\.", colnames(commData), ignore.case = T)
}else if(grepl(pattern = "speed", data.field, ignore.case = T)){
QFindex <- grep(pattern = "windDirFinalQF\\.", colnames(commData), ignore.case = T)
}
}
QFindex <- grep(pattern = "windDirFinalQF\\.", colnames(commData), ignore.case = T)
QFindex <- grep(pattern = "windSpeedFinalQF\\.", colnames(commData), ignore.case = T)
grepl(pattern = "speed", data.field, ignore.case = T)
if(grepl(pattern = "*speed*", data.field, ignore.case = T)){
QFindex = grep(pattern = "windSpeedFinalQF\\.", colnames(commData), ignore.case = T)
}else if(grepl(pattern = "speed", data.field, ignore.case = T)){
QFindex = grep(pattern = "windDirFinalQF\\.", colnames(commData), ignore.case = T)
}
if(grepl(pattern = "*speed*", data.field, ignore.case = T)){
QFindex = grep(pattern = "windSpeedFinalQF\\.", colnames(commData), ignore.case = T)
}else if(grepl(pattern = "*dir*", data.field, ignore.case = T)){
QFindex = grep(pattern = "windDirFinalQF\\.", colnames(commData), ignore.case = T)
}
QFindex <- grep(pattern = "*finalQF\\.", colnames(commData), ignore.case = T)
if(dpID=="DP1.00001.001"){
if(grepl(pattern = "*speed*", data.field, ignore.case = T)){
QFindex = grep(pattern = "windSpeedFinalQF\\.", colnames(commData), ignore.case = T)
}else if(grepl(pattern = "*dir*", data.field, ignore.case = T)){
QFindex = grep(pattern = "windDirFinalQF\\.", colnames(commData), ignore.case = T)
}
}
dataIndex <- grep(paste0(data.field), colnames(commData), ignore.case = T)
library(Noble)
time.agr=30
test.qf = "finalQF"
package<-"basic"
DateBgn <- paste0(bgn.month, "-01")
end_temp <- as.Date(paste0(end.month, "-01"), tz="UTC")
end_temp<- as.POSIXlt(paste0(end_temp, "-01"), tz="UTC")
end_temp$mon<-end_temp$mon+1
end_temp<-end_temp-lubridate::minutes(time.agr)-lubridate::seconds(1)
DateEnd<-as.Date(end_temp)
domn<-nneo::nneo_site(sites.req[s])$domainCode
dataFile<- paste0("NEON.", domn,".", sites.req[s],".", dpID, "_REQ_", DateBgn, "_", DateEnd, "_", time.agr,"min_", package, ".csv.gz")
s=1
domn<-nneo::nneo_site(sites.req[s])$domainCode
dataFile<- paste0("NEON.", domn,".", sites.req[s],".", dpID, "_REQ_", DateBgn, "_", DateEnd, "_", time.agr,"min_", package, ".csv.gz")
fullPath <- paste0(save.dir, "/", dataFile)
if (!file.exists(fullPath)){
print(paste("Currently downloading data for:", sites.req[s]))
sink<-Noble::data.pull(site = sites.req[s], bgn.month = bgn.month, end.month = end.month,
dpID = dpID, time.agr = time.agr, package = package, save.dir = save.dir)
}
save.dir="/Users/rlee/Dropbox/NEON/Commissioning/wind_plots/"
domn<-nneo::nneo_site(sites.req[s])$domainCode
dataFile<- paste0("NEON.", domn,".", sites.req[s],".", dpID, "_REQ_", DateBgn, "_", DateEnd, "_", time.agr,"min_", package, ".csv.gz")
sites.req="UNDE"
domn<-nneo::nneo_site(sites.req[s])$domainCode
dataFile<- paste0("NEON.", domn,".", sites.req[s],".", dpID, "_REQ_", DateBgn, "_", DateEnd, "_", time.agr,"min_", package, ".csv.gz")
fullPath <- paste0(save.dir, "/", dataFile)
if (!file.exists(fullPath)){
print(paste("Currently downloading data for:", sites.req[s]))
sink<-Noble::data.pull(site = sites.req[s], bgn.month = bgn.month, end.month = end.month,
dpID = dpID, time.agr = time.agr, package = package, save.dir = save.dir)
}
rm(sink) # get rid of environment data
if(is.null(data.field)){stop("No data.field specified or identifiable. Specify this parameter for this DP ID.")}
print(paste("Reading and plotting", sites.req[s], "data."))
commData <- data.frame(read.csv(fullPath, header = TRUE))
if(dpID=="DP1.00024.001"){
commData=commData[,-which(grepl(pattern = "outPAR*", x = colnames(commData)))]
}
QFindex <- grep(pattern = "*finalQF\\.", colnames(commData), ignore.case = T)
if(dpID=="DP1.00001.001"){
if(grepl(pattern = "*speed*", data.field, ignore.case = T)){
QFindex = grep(pattern = "windSpeedFinalQF\\.", colnames(commData), ignore.case = T)
}else if(grepl(pattern = "*dir*", data.field, ignore.case = T)){
QFindex = grep(pattern = "windDirFinalQF\\.", colnames(commData), ignore.case = T)
}
}
dataIndex <- grep(paste0(data.field), colnames(commData), ignore.case = T)
timeStmp <- as.POSIXct(strptime(commData[,1], format="%Y-%m-%d %H:%M:%S", tz="UTC"))
{pdf(file=paste0(save.dir, "/", sites.req[s], "_", dpID, "_", package, "_", data.field, ".pdf", sep=""), paper = "us")}
niceColors<- c("0"="#41f299", "1"="#f25841", "NA"="black")
for (idxPlot in 1:length(dataIndex)){
nameData <- names(commData)[dataIndex[idxPlot]]
data <- base::data.frame(time=timeStmp,data=commData[[dataIndex[idxPlot]]],qf=commData[[QFindex[idxPlot]]],
nameData=nameData)
nameQf=test.qf
# Generate data completeness plot
dataPlot <- base::data.frame(time=data$time,value=data$data,qfFail=data$qf)
if(base::sum(data[[2]],na.rm=TRUE) == 0) {
# No non-NA data, generate empty plot
plotData <- ggplot2::ggplot(data=data,ggplot2::aes(x=time)) + ggplot2::geom_blank()
grobData <- ggplot2::ggplotGrob(plotData)
} else {
# Data to plot!
plotData <- ggplot2::ggplot(data=data,ggplot2::aes(x=time,y=data)) +
ggplot2::geom_line() +
ggplot2::geom_point(size=1) +
ggplot2::geom_point(data=dataPlot,ggplot2::aes(x=time, y=value, color=factor(qfFail))) +
ggplot2::scale_color_manual(values = niceColors, name = "Final Quality Flag", limits=c(0, 1, "NA"))+
#ggplot2::scale_colour_continuous(low = "#a50037", high = "#00a560")+
ggplot2::theme_bw() +
ggplot2::labs(x="Date/Time", y=nameData, title=sites.req[s])
grobData <- ggplot2::ggplotGrob(plotData) # grab the grob for this plot for later manipulation
}
gridExtra::grid.arrange(grobData,nrow=1) # plot it
} ##Plotting code
commData[QFindex]
{graphics.off()}
print(paste(sites.req[s], "complete."))
### General Params
dir="/Users/rlee/Dropbox/NEON/Commissioning/wind_plots"
if(!dir.exists(dir)){dir.create(dir)}
save.dir=dir
bgn.month<-"2017-07"
end.month<-"2017-08"
# time.agr = 30
# package="expanded"
tis_site_config<-Noble::tis_site_config
### DP #########
dpID<-"DP1.00001.001"
test.sites<-c("BARR", "GRSM", "BART", "JERC", "UNDE")
lapply(test.sites, function(x) try(Noble::pull.n.plot(sites.req = x, bgn.month = bgn.month, end.month = end.month, dpID = dpID, save.dir = save.dir, data.field = "windDirMean")))
library(Noble)
### General Params
dir="/Users/rlee/Dropbox/NEON/Commissioning/wind_plots"
if(!dir.exists(dir)){dir.create(dir)}
save.dir=dir
bgn.month<-"2017-07"
end.month<-"2017-08"
# time.agr = 30
# package="expanded"
tis_site_config<-Noble::tis_site_config
### DP #########
dpID<-"DP1.00001.001"
test.sites<-c("BARR", "GRSM", "BART", "JERC", "UNDE")
lapply(test.sites, function(x) try(Noble::pull.n.plot(sites.req = x, bgn.month = bgn.month, end.month = end.month, dpID = dpID, save.dir = save.dir, data.field = "windDirMean")))
#grape test workflow:
site="BARR"
bgn.date = "20170301"
end.date = "20171101"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x)))
lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
#grape test workflow:
site="BARR"
bgn.date = "20170401"
end.date = "2017601"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 50)))
lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
site="BARR"
bgn.date = "20170401"
end.date = "20170601"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 50)))
lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 50)))
### General Params
bgn.month = "2017-06"
end.month = "2017-07"
time.agr = 30
package = "basic"
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC",
"DSNY", "LAJA", "GUAN", "UNDE", "UKFS", "KONZ", "KONA",
"ORNL", "MLBS", "GRSM", "TALL", "LENO", "DELA", "WOOD",
"TREE", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES",
"CLBJ", "NIWO", "MOAB", "SRER", "JORN", "ONAQ", "ABBY",
"SJER", "BARR", "TOOL", "DEJU", "HEAL")
passed.sites=c()
bad.sites=c("ABBY", "SJER", "NOGP", "SRER")
#SAAT######
dpID<-"DP1.00002.001"
prin.vars<-c("tempSingle")
sink<-lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)))
#TAAT######
dpID<-"DP1.00003.001"
prin.vars<-c("tempTriple")
sink<-lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)))
test <- "Air Temperature Process Quality"
testSubDir <- "TisAirTempProcessQuality"
if(grepl("darwin", version$os))
{
dirCommBase<-"/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/"
}else{
dirCommBase<-"N:/Science/Science Commissioning Archive/SiteAndPayload/"
}
myTitle <- paste("TIS Commissioning Test Report:", test, "Assessment")
rmdFile <- paste( testSubDir, ".Rmd", sep="")
testFullDir <- paste0( dirCommBase, testSubDir)
bgn.month = "2017-06"
end.month = "2017-07"
time.agr = 30
package = "basic"
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC",
"DSNY", "LAJA", "GUAN", "UNDE", "UKFS", "KONZ", "KONA",
"ORNL", "MLBS", "GRSM", "TALL", "LENO", "DELA", "WOOD",
"TREE", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES",
"CLBJ", "NIWO", "MOAB", "SRER", "JORN", "ONAQ", "ABBY",
"SJER", "BARR", "TOOL", "DEJU", "HEAL")
passed.sites=c()
bad.sites=c("ABBY", "SJER", "NOGP", "SRER")
dpID<-"DP1.00002.001"
prin.vars<-c("tempSingle")
sink<-lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)))
test.sites=tis_test_sites[-whihc(tis_test_sites %in% bad.sites|tis_test_sites %in% passed.sites)]
test.sites=tis_test_sites[-which(tis_test_sites %in% bad.sites|tis_test_sites %in% passed.sites)]
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC",
"DSNY", "LAJA", "GUAN", "UNDE", "UKFS", "KONZ", "KONA",
"ORNL", "MLBS", "GRSM", "TALL", "LENO", "DELA", "WOOD",
"TREE", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES",
"CLBJ", "NIWO", "MOAB", "SRER", "JORN", "ONAQ", "ABBY",
"SJER", "BARR", "TOOL", "DEJU", "HEAL")
passed.sites=c()
bad.sites=c("ABBY", "SJER", "NOGP", "SRER")
test.sites=tis_test_sites[-which(tis_test_sites %in% bad.sites|tis_test_sites %in% passed.sites)]
bgn.month = "2017-06"
end.month = "2017-07"
time.agr = 30
package = "basic"
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC",
"DSNY", "LAJA", "GUAN", "UNDE", "UKFS", "KONZ", "KONA",
"ORNL", "MLBS", "GRSM", "TALL", "LENO", "DELA", "WOOD",
"TREE", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES",
"CLBJ", "NIWO", "MOAB", "SRER", "JORN", "ONAQ", "ABBY",
"SJER", "BARR", "TOOL", "DEJU", "HEAL")
passed.sites=c()
bad.sites=c("ABBY", "SJER", "NOGP", "SRER")
test.sites=tis_test_sites[-which(tis_test_sites %in% bad.sites|tis_test_sites %in% passed.sites)]
#SAAT######
dpID<-"DP1.00002.001"
prin.vars<-c("tempSingle")
sink<-lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)))
#TAAT######
dpID<-"DP1.00003.001"
prin.vars<-c("tempTriple")
sink<-lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)))
### General Params
bgn.month = "2017-08"
end.month = "2017-09"
time.agr = 30
package = "basic"
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC",
"DSNY", "LAJA", "GUAN", "UNDE", "UKFS", "KONZ", "KONA",
"ORNL", "MLBS", "GRSM", "TALL", "LENO", "DELA", "WOOD",
"TREE", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES",
"CLBJ", "NIWO", "MOAB", "SRER", "JORN", "ONAQ", "ABBY",
"SJER", "BARR", "TOOL", "DEJU", "HEAL")
passed.sites=c()
bad.sites=c("ABBY", "SJER", "NOGP", "SRER")
test.sites=tis_test_sites[-which(tis_test_sites %in% bad.sites|tis_test_sites %in% passed.sites)]
#SAAT######
dpID<-"DP1.00002.001"
prin.vars<-c("tempSingle")
sink<-lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)))
#TAAT######
dpID<-"DP1.00003.001"
prin.vars<-c("tempTriple")
sink<-lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)))
dir="/Users/rlee/Dropbox/NEON/Commissioning/air_temp_plots"
if(!dir.exists(dir)){dir.create(dir)}
save.dir=dir
bgn.month<-"2017-07"
end.month<-"2017-08"
tis_site_config<-Noble::tis_site_config
### General Params
dir="/Users/rlee/Dropbox/NEON/Commissioning/air_temp_plots"
if(!dir.exists(dir)){dir.create(dir)}
save.dir=dir
bgn.month<-"2017-07"
end.month<-"2017-08"
# time.agr = 30
# package="expanded"
tis_site_config<-Noble::tis_site_config
### DP #########
dpID<-"DP1.00002.001"
test.sites<-c("BARR", "KONZ", "UKFS", "OAES", "CPER")
lapply(test.sites, function(x) try(Noble::pull.n.plot(sites.req = x, bgn.month = bgn.month, end.month = end.month, dpID = dpID, save.dir = save.dir)))
Noble::tis_site_config
View(Noble::tis_site_config)
library(Noble)
