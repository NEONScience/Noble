#         write.csv(x = dq.rslt, file = paste(rslt.dir,"results.csv",sep = "/"), col.names = T, row.names = F)
#     }
}
library(Noble)
site %in% Noble::rad_dq_info$Site
if(!(site %in% Noble::rad_dq_info$Site)){stop(paste0("Site is not in the list of DQ Test Sites. Please select from:/n", Noble::rad_dq_info$Site))}
paste0("Site is not in the list of DQ Test Sites. Please select from:/n", Noble::rad_dq_info$Site)
paste(Noble::rad_dq_info$Site)
library(Noble)
Noble:::rad.dq.test(site="JERC", save.dir = "/Users/rlee/Desktop/", bgn.month = "2017-10", end.month = "2017-11")
Noble:::rad.dq.test(site="JERC", save.dir = "/Users/rlee/Desktop/", bgn.month = "2017-10", end.month = "2017-11")
site.dir=Noble:::.data.route(site, save.dir)
library(Noble)
Noble:::rad.dq.test(site="JERC", save.dir = "/Users/rlee/Desktop/", bgn.month = "2017-10", end.month = "2017-11")
site="JERC"
save.dir = "/Users/rlee/Desktop/"
bgn.month = "2017-10"
end.month = "2017-11"
if(!(site %in% Noble::rad_dq_info$Site)){
message("Site is not in the current DQ test list. Please select from:")
stop(paste0(Noble::rad_dq_info$Site))
}
library(magrittr)
library(data.table)
library(dplyr)
########### GENERAL PARAMETERS ###########
#Define directories
domn=Noble::is_site_config$Domain[Noble::is_site_config$SiteID==site]
site.dir=Noble:::.data.route(site, save.dir)
rslt.dir=paste0(save.dir, "/", "Common/")
if(!dir.exists(rslt.dir)){
dir.create(rslt.dir)
}
#set up DP info
test.dpIDs=c("DP1.00014.001",
"DP1.00023.001",
"DP1.00024.001",
"DP1.00066.001"
)
# Add in Primary Pyranometer if Core site
if(Noble::tis_site_config$Core.Relocatable[Noble::tis_site_config$SiteID==site]=="Core"){test.dpIDs=c(test.dpIDs, "DP1.00022.001")}
########### VARIANCE TESTING ###########
######## ALL AVAILABLE RAD DATA ########
# First week start
frst.week=c(as.Date(paste0(bgn.month, "-01")), as.Date(paste0(bgn.month, "-01"))+7)
last.week=c(as.Date(Noble::end.day.time(end.month = end.month, time.agr = 1))-7, as.Date(Noble::end.day.time(end.month = end.month, time.agr = 1)))
# Pull and refine data to vairance fields only
raw.var.data=lapply(test.dpIDs, function(x)
try(Noble::data.pull(site = site,
dpID = x,
bgn.month = bgn.month,
end.month = end.month,
time.agr = 30,
package = "basic",
save.dir = site.dir)
)
)
#Put into massive data frame
var.data=do.call(cbind, raw.var.data)
var.data=data.frame(startDateTime=var.data[,1], var.data[,grepl(pattern = "variance", x = colnames(var.data), ignore.case = T)])
var.data=var.data[,-which(grepl(pattern = "*LW*", x = colnames(var.data)))]
# Convert to local time
time.zone=Noble::tis_site_config$Time.Zone[Noble::tis_site_config$SiteID==site]
var.data$startDateTime=as.POSIXct(var.data$startDateTime, tz="UTC")
var.data$startDateTime=as.POSIXct(format(var.data$startDateTime, tz=time.zone, usetz = T), tz=time.zone, usetz = T)
#subset to first and last weeks
first.pop=var.data[frst.week[2]>var.data$startDateTime&var.data$startDateTime>=frst.week[1],]
last.pop=var.data[last.week[2]>var.data$startDateTime&var.data$startDateTime>=last.week[1],]
#Subset to nightime conditions
test.time = c("00:00:00", "00:30:00", "01:00:00", "01:30:00", "02:00:00", "02:30:00", "03:00:00",
"03:30:00", "04:00:00")
first.pop=first.pop[which(strftime(first.pop$startDateTime, format="%H:%M:%S", tz=time.zone) %in% test.time),]
last.pop=last.pop[which(strftime(last.pop$startDateTime, format="%H:%M:%S", tz=time.zone) %in% test.time),]
## Remove all NAs, do this after subsetting to nightime conditions
first.pop=first.pop[,-which(colSums(is.na(first.pop))==length(first.pop[,1]))]
last.pop=last.pop[,-which(colSums(is.na(last.pop))==length(last.pop[,1]))]
f.test=stats::var.test(unlist(as.list(first.pop[,(2:length(colnames(first.pop)))])),# ------>f.test results####
unlist(as.list(last.pop[,(2:length(colnames(last.pop)))])))
if(f.test$statistic>1.05|f.test$statistic<0.95){f.test.result="Fail"}else{f.test.result="Pass"} ################################################################
message(paste0("Variance Stability Test: ", f.test.result))
########### INTERNAL CONSISTENCY ###########
########### PAR and QL PAR ONLY ############
site.MLs=1:Noble::tis_site_config$Num.of.MLs[Noble::tis_site_config$SiteID==site]
if(Noble::rad_dq_info$classification[Noble::rad_dq_info$Site==site]=="forest"){rho.TH=.65}else{rho.TH=.9}
PAR.pairwise=lapply(site.MLs[-1], function(x) c(x-1, x))
QL.PAR.pairwise=list(c(1,2), c(2,3))
PAR=try(Noble::data.pull(site = site,
dpID = "DP1.00024.001",
bgn.month = bgn.month,
end.month = end.month,
time.agr = 30,
package = "basic",
save.dir = site.dir)
)
QL.PAR=try(Noble::data.pull(site = site,
dpID = "DP1.00066.001",
bgn.month = bgn.month,
end.month = end.month,
time.agr = 30,
package = "basic",
save.dir = site.dir)
)
PAR=PAR[,grepl(pattern = "^PARMean", x = colnames(PAR))]
QL.PAR=QL.PAR[,grepl(pattern = "linePARMean", x = colnames(QL.PAR))]
PAR.rho=unlist(lapply(PAR.pairwise, function(x) cor.test(PAR[,x[1]], PAR[,x[2]], method = "spearman")$estimate))
QL.PAR.rho= unlist(lapply(QL.PAR.pairwise, function(x) cor.test(QL.PAR[,x[1]], QL.PAR[,x[2]], method = "spearman")$estimate))
names(PAR.rho)=paste0("PAR-", PAR.pairwise)
names(QL.PAR.rho)=c("QL PAR 1-3", "QL PAR 3-5")
if(any(PAR.rho<rho.TH)==F){PAR.rho.test="Pass"}else{PAR.rho.test="Fail"} # ------>PAR rho results####
if(any(QL.PAR.rho<rho.TH)==F){QL.PAR.rho.test="Pass"}else{QL.PAR.rho.test="Fail"} # ------>QL PAR rho results####
#WHERE TO DUMP?
#write.csv(x = raw.stats, file = paste(site.dir,"rawStats.csv",sep = "/"), col.names = T, row.names = F)
raw.stats=data.frame(rho.estimate=append(PAR.rho, QL.PAR.rho))
if(PAR.rho.test=="Fail"|QL.PAR.rho.test=="Fail"){
internal.compair.result="Fail"
}else{internal.compair.result="Pass"}
message(
paste0("Internal Comparison Test: ", internal.compair.result) ###############################################################################################
)
PAR=try(Noble::data.pull(site = site,
dpID = "DP1.00024.001",
bgn.month = bgn.month,
end.month = end.month,
time.agr = 30,
package = "basic",
save.dir = site.dir)
)
QL.PAR=try(Noble::data.pull(site = site,
dpID = "DP1.00066.001",
bgn.month = bgn.month,
end.month = end.month,
time.agr = 30,
package = "basic",
save.dir = site.dir)
)
PAR=PAR[,grepl(pattern = "^PARMean", x = colnames(PAR))]
QL.PAR=QL.PAR[,grepl(pattern = "linePARMean", x = colnames(QL.PAR))]
PAR.rho=unlist(lapply(PAR.pairwise, function(x) cor.test(PAR[,x[1]], PAR[,x[2]], method = "spearman")$estimate))
QL.PAR.rho= unlist(lapply(QL.PAR.pairwise, function(x) cor.test(QL.PAR[,x[1]], QL.PAR[,x[2]], method = "spearman")$estimate))
names(PAR.rho)=paste0("PAR-", PAR.pairwise)
names(QL.PAR.rho)=c("QL PAR 1-3", "QL PAR 3-5")
if(any(PAR.rho<rho.TH)==F){PAR.rho.test="Pass"}else{PAR.rho.test="Fail"} # ------>PAR rho results####
if(any(QL.PAR.rho<rho.TH)==F){QL.PAR.rho.test="Pass"}else{QL.PAR.rho.test="Fail"} # ------>QL PAR rho results####
#WHERE TO DUMP?
#write.csv(x = raw.stats, file = paste(site.dir,"rawStats.csv",sep = "/"), col.names = T, row.names = F)
raw.stats=data.frame(rho.estimate=append(PAR.rho, QL.PAR.rho))
rad.dq.test(site="JERC", save.dir = "/Users/rlee/Desktop/", bgn.month = "2017-10", end.month = "2017-11")
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
rad.dq.test(site="JERC", save.dir = "/Users/rlee/Desktop/", bgn.month = "2017-10", end.month = "2017-11")
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
qq
q
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
rad.dq.test(site="JERC", save.dir = "/Users/rlee/Desktop/", bgn.month = "2017-10", end.month = "2017-11")
########### TOWER-TOP CONSISTENCY ###########
########### Direct & Diffuse ONLY ###########
DirDif=try(Noble::data.pull(site = site,
dpID = "DP1.00014.001",
bgn.month = bgn.month,
end.month = end.month,
time.agr = 30,
package = "basic",
save.dir = Noble:::.data.route(site, save.dir = save.dir))
)
DirDif=data.frame(startDateTime=DirDif[,1],
dirRadMean=DirDif[,grepl(colnames(DirDif), pattern = "dirRadMean")],
difRadMean=DirDif[,grepl(colnames(DirDif), pattern = "difRadMean")],
gloRadMean=DirDif[,grepl(colnames(DirDif), pattern = "gloRadMean")]
)
# Sum up the direct and diffuse rad
DirDif$total=DirDif$dirRadMean+DirDif$difRadMean
# Convert to local time
time.zone=Noble::tis_site_config$Time.Zone[Noble::tis_site_config$SiteID==site]
DirDif$startDateTime=as.POSIXct(DirDif$startDateTime, tz="UTC")
DirDif$startDateTime=as.POSIXct(format(DirDif$startDateTime, tz=time.zone, usetz = T), tz=time.zone, usetz = T)
#Only rows with greater than 5 W/m^2 get tested
DirDif=DirDif[DirDif$total>50,]
DirDif$SZA=RAtmosphere::SZA(timein = DirDif$startDateTime,
Lat = Noble::tis_site_config$Latitude[Noble::tis_site_config$SiteID==site],
Lon = Noble::tis_site_config$Longitude[Noble::tis_site_config$SiteID==site]
)
DirDif$startDateTime[1]
DirDif
DirDif=try(Noble::data.pull(site = site,
dpID = "DP1.00014.001",
bgn.month = bgn.month,
end.month = end.month,
time.agr = 30,
package = "basic",
save.dir = Noble:::.data.route(site, save.dir = save.dir))
)
DirDif=data.frame(startDateTime=DirDif[,1],
dirRadMean=DirDif[,grepl(colnames(DirDif), pattern = "dirRadMean")],
difRadMean=DirDif[,grepl(colnames(DirDif), pattern = "difRadMean")],
gloRadMean=DirDif[,grepl(colnames(DirDif), pattern = "gloRadMean")]
)
DirDif$total=DirDif$dirRadMean+DirDif$difRadMean
time.zone=Noble::tis_site_config$Time.Zone[Noble::tis_site_config$SiteID==site]
DirDif$startDateTime=as.POSIXct(DirDif$startDateTime, tz="UTC")
DirDif$startDateTime=as.POSIXct(format(DirDif$startDateTime, tz=time.zone, usetz = T), tz=time.zone, usetz = T)
DirDif=DirDif[DirDif$total>50,]
DirDif=try(Noble::data.pull(site = site,
dpID = "DP1.00014.001",
bgn.month = bgn.month,
end.month = end.month,
time.agr = 30,
package = "basic",
save.dir = Noble:::.data.route(site, save.dir = save.dir))
)
DirDif=data.frame(startDateTime=DirDif[,1],
dirRadMean=DirDif[,grepl(colnames(DirDif), pattern = "dirRadMean")],
difRadMean=DirDif[,grepl(colnames(DirDif), pattern = "difRadMean")],
gloRadMean=DirDif[,grepl(colnames(DirDif), pattern = "gloRadMean")]
)
# Sum up the direct and diffuse rad
DirDif$total=DirDif$dirRadMean+DirDif$difRadMean
# Convert to local time
time.zone=Noble::tis_site_config$Time.Zone[Noble::tis_site_config$SiteID==site]
DirDif$startDateTime=as.POSIXct(DirDif$startDateTime, tz="UTC")
DirDif$startDateTime=as.POSIXct(format(DirDif$startDateTime, tz=time.zone, usetz = T), tz=time.zone, usetz = T)
View(DirDif)
DirDif=DirDif[DirDif$total>50&!is.na(DirDif$total),]
DirDif$SZA=RAtmosphere::SZA(timein = DirDif$startDateTime,
Lat = Noble::tis_site_config$Latitude[Noble::tis_site_config$SiteID==site],
Lon = Noble::tis_site_config$Longitude[Noble::tis_site_config$SiteID==site]
)
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
rad.dq.test(site="JERC", save.dir = "/Users/rlee/Desktop/", bgn.month = "2017-10", end.month = "2017-11")
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
View(raw.stats)
raw.stats
f.test
writeLines(text=f.test, con = paste0(raw.dir, "variance_stats.txt"))
domn=Noble::is_site_config$Domain[Noble::is_site_config$SiteID==site]
site.dir=Noble:::.data.route(site, save.dir)
rslt.dir=paste0(save.dir, "/Common/")
if(!dir.exists(rslt.dir)){
dir.create(rslt.dir)
}
raw.dir=paste0(site.dir, "/rawData/")
if(!dir.exists(raw.dir)){
dir.create(raw.dir)
}
#set up DP info
test.dpIDs=c("DP1.00014.001",
"DP1.00023.001",
"DP1.00024.001",
"DP1.00066.001"
)
writeLines(text=f.test, con = paste0(raw.dir, "variance_stats.txt"))
unlist(f.test)
paste0(unlist(f.test))
data.frame(variable=names(f.test), value=unlist(f.test))
data.frame(variable=names(unlist(f.test)), value=unlist(f.test))
data.frame(value=unlist(f.test))
View(data.frame(value=unlist(f.test)))
write.csv(x = data.frame(value=unlist(f.test)),file =  = paste0(raw.dir, "variance_stats.csv"))
write.csv(x = data.frame(value=unlist(f.test)),file = paste0(raw.dir, "variance_stats.csv"))
raw.stats=data.frame(rho.estimate=append(PAR.rho, QL.PAR.rho))
write.csv(x = raw.stats, file = paste0(raw.dir,"rawStats.csv"), col.names = T, row.names = F)
write.csv(x = raw.stats, file = paste0(raw.dir,"rho_stats.csv"), row.names = F)
write.csv(x = raw.stats, file = paste0(raw.dir,"par_rho_stats.csv"), row.names = T)
data.frame(sets=c("SZA<75", "75<SZA<93"), ratio=c(ratio1, ratio2), result=c(rat1Result, rat2Result))
DirDif=try(Noble::data.pull(site = site,
dpID = "DP1.00014.001",
bgn.month = bgn.month,
end.month = end.month,
time.agr = 30,
package = "basic",
save.dir = Noble:::.data.route(site, save.dir = save.dir))
)
DirDif=data.frame(startDateTime=DirDif[,1],
dirRadMean=DirDif[,grepl(colnames(DirDif), pattern = "dirRadMean")],
difRadMean=DirDif[,grepl(colnames(DirDif), pattern = "difRadMean")],
gloRadMean=DirDif[,grepl(colnames(DirDif), pattern = "gloRadMean")]
)
# Sum up the direct and diffuse rad
DirDif$total=DirDif$dirRadMean+DirDif$difRadMean
# Convert to local time
time.zone=Noble::tis_site_config$Time.Zone[Noble::tis_site_config$SiteID==site]
DirDif$startDateTime=as.POSIXct(DirDif$startDateTime, tz="UTC")
DirDif$startDateTime=as.POSIXct(format(DirDif$startDateTime, tz=time.zone, usetz = T), tz=time.zone, usetz = T)
#Only rows with greater than 5 W/m^2 get tested
DirDif=DirDif[DirDif$total>50&!is.na(DirDif$total),]
DirDif$SZA=RAtmosphere::SZA(timein = DirDif$startDateTime,
Lat = Noble::tis_site_config$Latitude[Noble::tis_site_config$SiteID==site],
Lon = Noble::tis_site_config$Longitude[Noble::tis_site_config$SiteID==site]
)
# A. Ratio is within ±8% for solar zenith angle < 75°
set1=DirDif[which(DirDif$SZA<75),]
ratio1=sum(set1$total)/sum(set1$gloRadMean)
if(0.92<ratio1&ratio1<1.08){
rat1Result="Pass"
}else(rat1Result="Fail")
# B. Ratio is within ±15% for 93° > solar zenith angle > 75°
set2=DirDif[which(DirDif$SZA>75&&DirDif$SZA<93),]
ratio2="NA"
rat2Result="NA"
if(length(set2[,1]>0)){
ratio2=sum(set2$total)/sum(set2$gloRadMean)
if(0.85<ratio1&ratio1<1.15){
rat2Result="Pass"
}else(rat2Result="Fail")
}
if(rat2Result=="Fail"|rat1Result=="Fail"){
ratio.result="Fail"
}else{ratio.result="Pass"}
data.frame(sets=c("SZA<75", "75<SZA<93"), ratio=c(ratio1, ratio2), result=c(rat1Result, rat2Result))
write.csv(x = tower.top, file = paste0(raw.dir,"tower_top_ratios.csv"), row.names = F)
tower.top=data.frame(sets=c("SZA<75", "75<SZA<93"), ratio=c(ratio1, ratio2), result=c(rat1Result, rat2Result))
write.csv(x = tower.top, file = paste0(raw.dir,"tower_top_ratios.csv"), row.names = F)
uscrn.site=as.character(Noble::rad_dq_info$nearestUSCRN[Noble::rad_dq_info$Site==site])
temp=Noble::pull.USCRN.data(timeScale = "subhourly",
stationID = uscrn.site,
TimeBgn = paste0(bgn.month, "-01"),
TimeEnd =  as.character(Noble::end.day.time(end.month = end.month, time.agr = 1))
)
ext.data=tem
write.csv(x = ext.data, file = paste0(raw.dir, "USCRN_", uscrn.site, ".csv"), row.names = F)
ext.data=temp
write.csv(x = ext.data, file = paste0(raw.dir, "USCRN_", uscrn.site, ".csv"), row.names = F)
data.frame(spearman.results)
spearman.results=cor.test(bothRad$ExtRad, bothRad$NEONRad, method = "spearman", conf.level = 0.95)
ext.data=temp
write.csv(x = ext.data, file = paste0(raw.dir, "USCRN_", uscrn.site, ".csv"), row.names = F)
int.data=try(Noble::data.pull(site = site,
dpID = "DP1.00014.001",
bgn.month = bgn.month,
end.month = end.month,
time.agr = 30,
package = "basic",
save.dir = Noble:::.data.route(site, save.dir = save.dir))
)
extRad<-data.frame(ext.data %>%
group_by(UTC_DATE = cut(UTC_DATE, breaks="30 min")) %>%
summarize(SOLAR_RADIATION = mean(SOLAR_RADIATION)))
bothRad<-data.frame(cbind(extRad, int.data[,grepl(x = colnames(int.data), pattern = "gloRadMean")]))
colnames(bothRad)<-c("UTC_Date", "ExtRad", "NEONRad")
spearman.results=cor.test(bothRad$ExtRad, bothRad$NEONRad, method = "spearman", conf.level = 0.95)
spearman.results=cor.test(bothRad$ExtRad, bothRad$NEONRad, method = "spearman", conf.level = 0.95, exact = F)
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
rad.dq.test(site="HEAL", save.dir = "/Users/rlee/Desktop/", bgn.month = "2017-10", end.month = "2017-11")
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
rad.dq.test(site="HEAL", save.dir = "/Users/rlee/Desktop/", bgn.month = "2017-10", end.month = "2017-11")
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
interactive()
source('~/Dropbox/GitHub/Noble-Package/Noble/R/rad_dq_test.R')
?getNetwork
radius=5
site="CPER"
out=metScanR::getNearby(siteID = paste0("NEON:", site), radius = radius)
out$USW00094074
filter(out, platform=="USCRN")
?Filter
?filter
names(out)
?rapply
lapply(out, function(x) out[[x]]$platform="USCRN")
lapply(out, function(x) out[x]$platform="USCRN")
out
out[2]
rapply(object = out, f = names(x)=="USCRN")
X <- list(list(a = pi, b = list(c = 1:1)), d = "a test")
rapply(X, function(x) x, how = "replace")
lapply(out, function(x) out[[x]])
lapply(out, function(x) unlist(out)[[x]])
lapply(out, function(x) unlist(out)[x])
out[[2]]
lapply(out, function(x) x$platform=="USCRN")
lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
site="HARV"
out=metScanR::getNearby(siteID = paste0("NEON:", site), radius = radius)
library(metScanR)
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
uscrn
all(is.null(uscrn))
(is.null(uscrn))
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers$idType=="WBAN")
uscrn
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]) #$identifiers$idType=="WBAN")
uscrn
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers$idType=="WBAN")
site="CPER"
uscrn
out=metScanR::getNearby(siteID = paste0("NEON:", site), radius = radius)
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers$idType=="WBAN")
uscrn
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers[idType=="WBAN"])
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
uscrn
uscrn=is.null(uscrn)
uscrn
uscrn=uscrn[lengths(uscrn)==0]
uscrn
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
uscrn=uscrn[lengths(uscrn)<=1]
uscrn=uscrn[lengths(uscrn)>1]
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
uscrn=uscrn[lengths(uscrn)>1]
uscrn
site.id=lapply(uscrn, function(x) x$id[x$idType=="WBAN"])
site="HARV"
out=metScanR::getNearby(siteID = paste0("NEON:", site), radius = radius)
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
uscrn=uscrn[lengths(uscrn)>1]
site.id=lapply(uscrn, function(x) x$id[x$idType=="WBAN"])
site.id=c()
site="HARV"
######
site.id=c()
while(length(site.id)<1){
out=metScanR::getNearby(siteID = paste0("NEON:", site), radius = radius)
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
uscrn=uscrn[lengths(uscrn)>1]
site.id=lapply(uscrn, function(x) x$id[x$idType=="WBAN"])
radius=radius+5
}
site.id=c()
length(site.id)
radius=5
site="CPER"
######
site.id=c()
while(length(site.id)<1){
out=metScanR::getNearby(siteID = paste0("NEON:", site), radius = radius)
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
uscrn=uscrn[lengths(uscrn)>1]
site.id=lapply(uscrn, function(x) x$id[x$idType=="WBAN"])
print(radius)
radius=radius+5
}
library(metScanR)
radius=5
site="CPER"
######
site.id=c()
library(metScanR)
while(length(site.id)<1){
out=getNearby(siteID = paste0("NEON:", site), radius = radius)
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
uscrn=uscrn[lengths(uscrn)>1]
site.id=lapply(uscrn, function(x) x$id[x$idType=="WBAN"])
print(("Nearest USCRN site within a ", radius, " km radius of ", site, "."))
radius=radius+5
}
radius=5
site="CPER"
######
site.id=c()
library(metScanR)
while(length(site.id)<1){
out=getNearby(siteID = paste0("NEON:", site), radius = radius)
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
uscrn=uscrn[lengths(uscrn)>1]
site.id=lapply(uscrn, function(x) x$id[x$idType=="WBAN"])
print(paste0("Nearest USCRN site within a ", radius, " km radius of ", site, "."))
radius=radius+5
}
radius=5
site="WOOD"
######
site.id=c()
library(metScanR)
while(length(site.id)<1){
out=getNearby(siteID = paste0("NEON:", site), radius = radius)
uscrn=lapply(out, function(x) x[x$platform=="USCRN"]$identifiers)
uscrn=uscrn[lengths(uscrn)>1]
site.id=lapply(uscrn, function(x) x$id[x$idType=="WBAN"])
print(paste0("Nearest USCRN site within a ", radius, " km radius of ", site, "."))
radius=radius+5
}
metScanR::siteFinder(siteID = "NEON:CPER", network = c("NEON", "USCRN"), radius = radius)
temp=metScanR::siteFinder(siteID = "NEON:CPER", network = c("NEON", "USCRN"), radius = radius)
radius=5
temp=metScanR::siteFinder(siteID = "NEON:CPER", network = "USCRN", radius = radius)
temp
uscrn=lapply(out, function(x) x$platform$identifiers$id[x$idType=="WBAN"])
out=metScanR::siteFinder(siteID = "NEON:CPER", network = "USCRN", radius = radius)
uscrn=lapply(out, function(x) x$platform$identifiers$id[x$idType=="WBAN"])
uscrn=lapply(out, function(x) x$platform$identifiers$id[x$platform$identifiers$idType=="WBAN"])
out$USW00094074$platform
uscrn=lapply(out, function(x) x$identifiers$id[x$identifiers$idType=="WBAN"])
uscrn
length(uscrn)
uscrn=c()
library(metScanR)
while(length(site.id)<1){
out=metScanR::siteFinder(siteID = "NEON:CPER", network = "USCRN", radius = radius)
uscrn=lapply(out, function(x) x$identifiers$id[x$identifiers$idType=="WBAN"])
if(length(uscrn)<1){
print(paste0("Nearest USCRN site within a ", radius, " km radius of ", site, "."))
}
radius=radius+5
}
length(uscrn)
uscrn=c()
library(metScanR)
while(length(uscrn)<1){
out=metScanR::siteFinder(siteID = "NEON:CPER", network = "USCRN", radius = radius)
uscrn=lapply(out, function(x) x$identifiers$id[x$identifiers$idType=="WBAN"])
if(length(uscrn)<1){
print(paste0("Nearest USCRN site within a ", radius, " km radius of ", site, "."))
}
radius=radius+5
}
uscrn
uscrn.id=uscrn[1]
uscrn.id=unlist(uscrn[1])
