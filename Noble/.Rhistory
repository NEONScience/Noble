##############
test.sites="DSNY"
###BGN Dircet and Diffuse Rad #########
dpID="DP1.00014.001"
prin.vars=c("difRad", "gloRad")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
### BGN Shortwave Rad #############
dpID="DP1.00022.001"
prin.vars=c("shortRad")
core.sites=test.sites[which(test.sites %in% Noble::tis_site_config$SiteID[which(Noble::tis_site_config$Core.Relocatable=="Core")])]
sink=lapply(core.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
#### BGN Shortwave and longwave radiation (net radiometer) ####
dpID="DP1.00023.001"
prin.vars=c("inSW", "outLW")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
#### BGN PAR ####
dpID="DP1.00024.001"
prin.vars=c("PAR")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
#### BGN QL PAR ####
dpID="DP1.00066.001"
prin.vars=c("linePAR")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
rm(sink)
#### THIS BIT GENERATES PARSED RESUTLS DF
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
# EDIT
test = "TIS Radiation Process Quality "
testSubDir = "TisRadiationProcessQuality"
if(grepl("darwin", version$os))
{
mountPoint<-"/Volumes/neon/" #Mac
}else{
mountPoint<-"N:/" #Windows
}
dirCommBase = paste0(mountPoint, "Science/Science Commissioning Archive/SiteAndPayload/")
# should not need to edit these...
myTitle = paste("TIS Commissioning Test Report:", test, "Assessment")
rmdFile = paste( testSubDir, ".Rmd", sep="")
testFullDir = paste(dirCommBase, testSubDir, "/", sep="")
dir = testFullDir
## RAD PQ test
### General Params
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC", "DSNY", "LAJA", "GUAN", "UNDE", "UKFS", "KONZ", "KONA", "ORNL", "MLBS", "GRSM", "TALL", "LENO", "DELA", "WOOD", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES", "CLBJ", "NIWO", "MOAB",  "SRER", "JORN", "ONAQ", "ABBY", "SJER", "BARR", "HEAL", "TOOL", "DEJU", "OAES")
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
bad.sites=c("SJER")
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
save.dir = dir
bgn.month = "2018-01"
end.month = "2018-02"
time.agr = 30
package = "basic"
### NO TEST ##
##############
test.sites="ABBY"
###BGN Dircet and Diffuse Rad #########
dpID="DP1.00014.001"
prin.vars=c("difRad", "gloRad")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
### BGN Shortwave Rad #############
dpID="DP1.00022.001"
prin.vars=c("shortRad")
core.sites=test.sites[which(test.sites %in% Noble::tis_site_config$SiteID[which(Noble::tis_site_config$Core.Relocatable=="Core")])]
sink=lapply(core.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
#### BGN Shortwave and longwave radiation (net radiometer) ####
dpID="DP1.00023.001"
prin.vars=c("inSW", "outLW")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
#### BGN PAR ####
dpID="DP1.00024.001"
prin.vars=c("PAR")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
#### BGN QL PAR ####
dpID="DP1.00066.001"
prin.vars=c("linePAR")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
rm(sink)
#### THIS BIT GENERATES PARSED RESUTLS DF
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
view(parsed.results)
### General Params
bgn.month="2018-02"
end.month="2018-02"
# EDIT
test <- "Air Temperature Process Quality"
testSubDir <- "TisAirTempProcessQuality"
if(grepl("darwin", version$os))
{
dirCommBase<-"/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/"
}else{
dirCommBase<-"N:/Science/Science Commissioning Archive/SiteAndPayload/"
}
# should not need to edit these...
myTitle <- paste("TIS Commissioning Test Report:", test, "Assessment")
rmdFile <- paste( testSubDir, ".Rmd", sep="")
testFullDir <- paste0( dirCommBase, testSubDir)
dir=testFullDir
### General Params
bgn.month="2018-02"
end.month="2018-02"
bgn.date = "2018-01-01"
end.date = "2018-02-28"
time.agr = 30
package = "basic"
# tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC",
#                  "DSNY", "LAJA", "GUAN", "UNDE", "UKFS", "KONZ", "KONA",
#                  "ORNL", "MLBS", "GRSM", "TALL", "LENO", "DELA", "WOOD",
#                  "TREE", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES",
#                  "CLBJ", "NIWO", "MOAB", "SRER", "JORN", "ONAQ", "ABBY",
#                  "SJER", "BARR", "TOOL", "DEJU", "HEAL")
bad.sites="SJER"
tis_test_sites= dplyr::intersect(Noble::test.sites(dpID = "DP1.00002.001", bgn.month = bgn.month, end.month = end.month),
Noble::test.sites(dpID = "DP1.00003.001", bgn.month = bgn.month, end.month = end.month))
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
ML_4_snow_sites=c("BARR", "NIWO", "TOOL", "HEAL", "WOOD")
ML_5_snow_sites=c("DEJU")
ML_6_snow_sites=c("HARV", "BART")
test.sites=tis_test_sites[-which(tis_test_sites %in% bad.sites|
tis_test_sites %in% passed.sites|
tis_test_sites %in% ML_4_snow_sites|
tis_test_sites %in% ML_5_snow_sites|
tis_test_sites %in% ML_6_snow_sites)]
test.sites="ABBY"
## NORMAL SITES
#SAAT######
dpID<-"DP1.00002.001"
prin.vars<-c("tempSingle")
sink<-lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month, time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)))
#TAAT######
dpID<-"DP1.00003.001"
prin.vars<-c("tempTriple")
sink<-lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month, time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)))
## 4ML sensor snow removal sites
## NORMAL SITES
#SAAT######
dpID<-"DP1.00002.001"
prin.vars<-c("tempSingle")
q.th=(95-25)
v.th=(90-25)
sink<-lapply(ML_4_snow_sites, function(x) try(Noble:::.tis.pq.test(site = x, dpID = dpID, bgn.date = bgn.date, end.date = end.date,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars, q.th = q.th, v.th=v.th)))
#TAAT######
dpID<-"DP1.00003.001"
prin.vars<-c("tempTriple")
sink<-lapply(ML_4_snow_sites, function(x) try(Noble:::.tis.pq.test(site = x, dpID = dpID, bgn.date = bgn.date, end.date = end.date,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars, q.th = 95, v.th=90)))
## 5ML sensor snow removal sites
## NORMAL SITES
#SAAT######
dpID<-"DP1.00002.001"
prin.vars<-c("tempSingle")
q.th=(95-20)
v.th=(90-20)
sink<-lapply(ML_5_snow_sites, function(x) try(Noble:::.tis.pq.test(site = x, dpID = dpID, bgn.date = bgn.date, end.date = end.date,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars, q.th = q.th, v.th=v.th)))
#TAAT######
dpID<-"DP1.00003.001"
prin.vars<-c("tempTriple")
sink<-lapply(ML_5_snow_sites, function(x) try(Noble:::.tis.pq.test(site = x, dpID = dpID, bgn.date = bgn.date, end.date = end.date,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars, q.th = 95, v.th=90)))
## 6ML sensor snow removal sites
## NORMAL SITES
#SAAT######
dpID<-"DP1.00002.001"
prin.vars<-c("tempSingle")
q.th=(95-16.67)
v.th=(90-16.67)
sink<-lapply(ML_6_snow_sites, function(x) try(Noble:::.tis.pq.test(site = x, dpID = dpID, bgn.date = bgn.date, end.date = end.date,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars, q.th = q.th, v.th=v.th)))
#TAAT######
dpID<-"DP1.00003.001"
prin.vars<-c("tempTriple")
sink<-lapply(ML_6_snow_sites, function(x) try(Noble:::.tis.pq.test(site = x, dpID = dpID,bgn.date = bgn.date, end.date = end.date,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars, q.th = 95, v.th=90)))
parsed.results=Noble::parse.results(test.dir = testFullDir, write.summary = T)
view(parsed.results)
Noble::gap.vis(site = "ABBY", bgn.month = "2018-02", end.month = "2018-02", dpID = "DP1.00002.001", save.dir = "~/Dropbox/NEON/")
# EDIT
test = "TIS Radiation Process Quality "
testSubDir = "TisRadiationProcessQuality"
if(grepl("darwin", version$os))
{
mountPoint<-"/Volumes/neon/" #Mac
}else{
mountPoint<-"N:/" #Windows
}
dirCommBase = paste0(mountPoint, "Science/Science Commissioning Archive/SiteAndPayload/")
# should not need to edit these...
myTitle = paste("TIS Commissioning Test Report:", test, "Assessment")
rmdFile = paste( testSubDir, ".Rmd", sep="")
testFullDir = paste(dirCommBase, testSubDir, "/", sep="")
dir = testFullDir
## RAD PQ test
### General Params
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC", "DSNY", "LAJA", "GUAN", "UNDE", "UKFS", "KONZ", "KONA", "ORNL", "MLBS", "GRSM", "TALL", "LENO", "DELA", "WOOD", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES", "CLBJ", "NIWO", "MOAB",  "SRER", "JORN", "ONAQ", "ABBY", "SJER", "BARR", "HEAL", "TOOL", "DEJU", "OAES")
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
bad.sites=c("SJER")
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
save.dir = dir
bgn.month = "2017-12"
end.month = "2017-12"
time.agr = 30
package = "basic"
### NO TEST ##
##############
test.sites="JORN"
###BGN Dircet and Diffuse Rad #########
dpID="DP1.00014.001"
prin.vars=c("difRad", "gloRad")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
### BGN Shortwave Rad #############
dpID="DP1.00022.001"
prin.vars=c("shortRad")
core.sites=test.sites[which(test.sites %in% Noble::tis_site_config$SiteID[which(Noble::tis_site_config$Core.Relocatable=="Core")])]
sink=lapply(core.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
#### BGN Shortwave and longwave radiation (net radiometer) ####
dpID="DP1.00023.001"
prin.vars=c("inSW", "outLW")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
#### BGN PAR ####
dpID="DP1.00024.001"
prin.vars=c("PAR")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
#### BGN QL PAR ####
dpID="DP1.00066.001"
prin.vars=c("linePAR")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
rm(sink)
#### THIS BIT GENERATES PARSED RESUTLS DF
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
parsed.results
View(parsed.results)
Noble::gap.vis(site = "JORN", bgn.month = "2017-12", end.month = "2017-12", dpID = "DP1.00023.001", save.dir = "~/Dropbox/NEON/")
Noble::gap.vis(site = "JORN", bgn.month = "2017-12", end.month = "2017-12", dpID = "DP1.00023.001", save.dir = "~/Dropbox/NEON/")
Noble::gap.vis(site = "JORN", bgn.month = "2017-12", end.month = "2018-01", dpID = "DP1.00023.001", save.dir = "~/Dropbox/NEON/")
Noble::gap.vis(site = "JORN", bgn.month = "2017-11", end.month = "2018-01", dpID = "DP1.00023.001", save.dir = "~/Dropbox/NEON/")
Noble::pull.n.plot(sites.req = "JORN", bgn.month = "2017-11", end.month = "2018-01", dpID = "DP1.00023.001", save.dir = "~/Dropbox/NEON/")
Noble::pull.n.plot(sites.req = "JORN", bgn.month = "2017-11", end.month = "2018-01", dpID = "DP1.00023.001", save.dir = "~/Dropbox/NEON/", data.field = "inLWMean")
Noble::pull.n.plot(sites.req = "JORN", bgn.month = "2017-11", end.month = "2018-01", dpID = "DP1.00023.001", save.dir = "~/Dropbox/NEON/", data.field = "outLWMean")
library(Noble)
library(Noble)
test = "TIS Radiation Process Quality "
testSubDir = "TisRadiationProcessQuality"
if(grepl("darwin", version$os))
{
mountPoint<-"/Volumes/neon/" #Mac
}else{
mountPoint<-"N:/" #Windows
}
dirCommBase = paste0(mountPoint, "Science/Science Commissioning Archive/SiteAndPayload/")
# should not need to edit these...
myTitle = paste("TIS Commissioning Test Report:", test, "Assessment")
rmdFile = paste( testSubDir, ".Rmd", sep="")
testFullDir = paste(dirCommBase, testSubDir, "/", sep="")
dir = testFullDir
#### THIS BIT GENERATES PARSED RESUTLS DF
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
View(parsed.results)
username="rlee@neoninc.org"
password="1.380x1023"
#require(base64enc)
require(httr)
require(jsonlite)
#login for a session
httr::POST(url="https://neoninc.atlassian.net/rest/auth/1/session", body = list(username=username, password=password), encode = "json") #This works to login (status 200)
#Testing how to get info from JIRA
temp=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063")
ticket=jsonlite::fromJSON(base::rawToChar(temp$content))
ticket
ticket$fields$customfield_11601
#Testing how to get info from JIRA
temp=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063")
ticket=jsonlite::fromJSON(base::rawToChar(temp$content))
ticket$fields$customfield_11601
#Testing how to get info from JIRA
temp=httr::GET(url = "https://neoninc.atlassian.net//rest/api/2/field/customfield_11601/option ")
#Testing how to get info from JIRA
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net//rest/api/2/field/customfield_11601/option ")
View(sn.field.options)
#Testing how to get info from JIRA
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net//rest/api/2/field/customfield_11601/option")
View(sn.field.options)
#Testing how to get info from JIRA
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net//rest/api/2/field")
View(sn.field.options)
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option")
View(sn.field.options)
httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field")
#Testing how to get info from JIRA
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field")
#Testing how to get info from JIRA
fields=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field")
jsonlite::fromJSON(base::rawToChar(fields))
jsonlite::fromJSON(base::rawToChar(fields$content))
fields=jsonlite::fromJSON(base::rawToChar(fields$content))
view(fields)
httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option")
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field/11601/option")
View(sn.field.options)
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option")
View(sn.field.options)
fields[fields$schema$customId==11601]
fields[fields$schema$customId==11601,]
fields[grepl(pattern = 11601, x = fields$id),]
fields[grepl(pattern = 11601, x = fields$id),]$schema
opts=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/customFieldOption/11601")
View(opts)
opts=jsonlite::fromJSON(base::rawToChar(httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/customFieldOption/11601")$content))
opts=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/customFieldOption/11601")$content)
opts=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/customFieldOption/11601")$content
opts=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/customFieldOption/11601")
opts$content
View(raw.geology)
fromJSON(opts$content)
fromJSON(rawToChar(opts$content))
sn.opts=data.frame(value=c("None", "Change", "Incident", "Knowledge Base", "Problem", "Request", "Not Yet Classified"),
id=(-1, 12903, 12901, 12904, 12902, 12905, 12906))
sn.opts=data.frame(value=c("None", "Change", "Incident", "Knowledge Base", "Problem", "Request", "Not Yet Classified"),
id=c(-1, 12903, 12901, 12904, 12902, 12905, 12906))
sn.opts
opts=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/customFieldOption/12901")
fromJSON(rawToChar(opts$content))
ticket.number="NEON-13427"
?PUT
ticket.path=paste0("https://neoninc.atlassian.net/rest/api/2/issue/", ticket.number)
t.return=httr::GET(url = ticket.path)
t.return
t.content=jsonlite::fromJSON(base::rawToChar(t.return$content))
t.content$fields$customfield_11601
sn.field=t.content$fields$customfield_11601
sn.field="Knowledge Base"
sn.field$value=sn.field
sn.field
new.sn=list(self=paste0("https://neoninc.atlassian.net/rest/api/2/customFieldOption/", sn.opts$id[sn.opts$value==sn.field]), value=sn.field, id=sn.opts$id[sn.opts$value==sn.field])
sn.field="Knowledge Base"
new.sn=list(self=paste0("https://neoninc.atlassian.net/rest/api/2/customFieldOption/", sn.opts$id[sn.opts$value==sn.field]), value=sn.field, id=sn.opts$id[sn.opts$value==sn.field])
t.content$fields$customfield_11601=new.sn
t.newjsonlite::toJSON(t.content)
t.new=jsonlite::toJSON(t.content)
t.new
httr::PUT(url = ticket.path, body = t.new)
t.sn.update=list(fields=list(customfield_11601=sn.field))
toJSON(t.sn.update)
t.sn.update=jsonlite::toJSON(list(fields=list(customfield_11601=sn.field)))
httr::PUT(url = ticket.path, body = t.sn.update)
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'application/json')
t.sn.update=list(fields=list(customfield_11601=sn.field))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'application/json')
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=c(customfield_11601=sn.field))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list("fields"=c(customfield_11601=sn.field))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
fields=list("summary"="test")
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
fields=list(fields=list("summary"="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
fields=list(fields=c("summary"="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=c("summary"="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=toJSON(list(fields=c("summary"="test")))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=c("summary"="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=c(summary="test"))
toJSON(t.sn.update)
t.sn.update=list(fields=list(summary="test"))
toJSON(t.sn.update)
t.sn.update=list(fields=list(description="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list(customfield_11601="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list(customfield_11601=12901))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list(customfield_11601="12901"))
source('~/Dropbox/NEON/jira_to_servicenow.R', echo=TRUE)
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list("customfield_11601"="12901"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list("customfield_11601"="12901"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list("customfield_11601"=12901))
toJSON(t.sn.update)
t.sn.update=list(fields=list("customfield_11601"="12901"))
toJSON(t.sn.update)
t.sn.update=list(update=list("customfield_11601"=list(set=12901)))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(update=list(customfield_11601=list(set=12901)))
toJSON(t.sn.update)
t.sn.update=jsonlite::toJSON(list(update=list(customfield_11601=list(set=12901))))
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "[")
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\[")
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[")
t.sn.update
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[|\\]")
httr::PUT(url = ticket.path, body = t.sn.update)
t.sn.update
t.sn.update=jsonlite::toJSON(list(fields=list(customfield_11601=12901)))
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[|\\]")
httr::PUT(url = ticket.path, body = t.sn.update)
t.sn.update=jsonlite::toJSON(list(fields=list(customfield_11601=12901)))
httr::PUT(url = ticket.path, body = t.sn.update)
t.sn.update
#login for a session
httr::POST(url="https://neoninc.atlassian.net/rest/auth/1/session", body = list(username=username, password=password), encode = "json") #This works to login (status 200)
httr::PUT(url = ticket.path, body = t.sn.update, encode = json)
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=jsonlite::toJSON(list(fields=list(customfield_11601=12901)))
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[|\\]")
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=jsonlite::toJSON(list(fields=list(customfield_11601=12901)))
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[|\\]")
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
httr::PUT(url = ticket.path, body = t.sn.update)#, encode = "json")
t.sn.update=jsonlite::toJSON(list(fields=list(description=12901)))
httr::PUT(url = ticket.path, body = t.sn.update)#, encode = "json")
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[|\\]")
httr::PUT(url = ticket.path, body = t.sn.update)#, encode = "json")
t.sn.update=jsonlite::toJSON(list(fields=list(description=12901)))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list(description=12901))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list("description"=12901))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list("description"="12901"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list(customfield_11601"="12901"))
t.sn.update=list(fields=list("customfield_11601"="12901"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list("customfield_11601"="None"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list("customfield_11601"=-1))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
out=httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
fromJSON(rawToChar(out))
fromJSON(rawToChar(out$content))
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option")
ticket=jsonlite::fromJSON(base::rawToChar(temp$content))
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option")
ticket=jsonlite::fromJSON(base::rawToChar(sn.field.options$content))
ticket
t.content$fields$customfield_11601
t.sn.update=list(fields=list("customfield_11601"=list("self"=paste0("https://neoninc.atlassian.net/rest/api/2/customFieldOption/12904", "value"="Knowledge Base", "id"=12904))))
out=httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
fromJSON(rawToChar(out$content))
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option/suggestions/edit/")
sn.field.options
t.sn.update=list(fields=list("customfield_11601"=list("self"=paste0("https://neoninc.atlassian.net/rest/api/2/customFieldOption/12904", "value"="Knowledge Base", "id"=12904))))
toJSON(t.sn.update)
t.sn.update=list(fields=list("customfield_11601"=list("self"=paste0("https://neoninc.atlassian.net/rest/api/2/customFieldOption/12904", "value"="Knowledge Base", "id"=12904))))
t.sn.update=list(fields=list("customfield_11601"=list("self"=paste0("https://neoninc.atlassian.net/rest/api/2/customFieldOption/",12904), "value"="Knowledge Base", "id"=12904)))
toJSON(t.sn.update)
out=httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
out
fromJSON(rawToChar(out$content))
httr::get("https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option/-1" )
httr::GET("https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option/-1" )
httr::GET("https://neoninc.atlassian.net/rest/api/2/field/11601/option/-1")
httr::GET("https://neoninc.atlassian.net/rest/api/2/field/11601/option/")
httr::GET("https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option/")
httr::GET("https://neoninc.atlassian.net/rest/api/2/issue/NEON-11601/watchers/")
rawToChar(httr::GET("https://neoninc.atlassian.net/rest/api/2/issue/NEON-11601/watchers/"))
rawToChar(httr::GET("https://neoninc.atlassian.net/rest/api/2/issue/NEON-11601/watchers/")$content)
fromJSON(rawToChar(httr::GET("https://neoninc.atlassian.net/rest/api/2/issue/NEON-11601/watchers/")$content))
t.sn.update='{fields:{"customfield_11601": 12901}}'
out=httr::PUT(url = ticket.path, body = t.sn.update)
httr::PUT(url = ticket.path, body = t.sn.update)
httr::PUT(url = ticket.path, body = t.sn.update, encode = "raw")
fromJSON(t.sn.update)
t.sn.update='{"fields": {"customfield_11601": 12901}}'
fromJSON(t.sn.update)
t.sn.update=charToRaw('{"fields": {"customfield_11601": 12901}}')
httr::PUT(url = ticket.path, body = t.sn.update, encode = "raw")
t.sn.update='{"fields": {"customfield_11601": 12901}}'
fromJSON(t.sn.update)
fromJSON(t.sn.update, flatten = )
