spearman=as.data.frame(do.call(rbind, spearman))
sman.rho=data.frame(Pair=mls, internal.rho=spearman$estimate)
spearman
unlist(spearman$estimate)
spearman=lapply(c( 1:(length(internal.data)-1)), function(l) cor.test(x = internal.data[,l], y = internal.data[,l+1], method = "spearman"))
mls=unlist(lapply(c( 1:(length(internal.data)-1)), function(x) paste0("ML ", x, "-", x+1)))
spearman=as.data.frame(do.call(rbind, spearman))
sman.rho=data.frame(Pair=mls, internal.rho=unlist(spearman$estimate))
View(sman.rho)
colnames(internal.data)
## PART 2: Internal Consistancy
internal.data=test.data[,grepl(pattern = "tempSingleMean", x = colnames(test.data))|grepl(pattern = "tempTripleMean", x = colnames(test.data))]
spearman=lapply(c( 1:(length(internal.data)-1)), function(l) cor.test(x = internal.data[,l], y = internal.data[,l+1], method = "spearman"))
mls=unlist(lapply(c( 1:(length(internal.data)-1)), function(x) paste0("ML ", x, "-", x+1)))
spearman=as.data.frame(do.call(rbind, spearman))
sman.rho=data.frame(Pair=mls, internal.rho=unlist(spearman$estimate))
sman.rho
rho=correlation$estimate
out=c("Mean Variance"=f.test[length(f.test)], "Internal Correlation"=mean(sman.rho$internal.rho), "External Correlation"=rho)
out
variance=data.frame(ML=seq(Noble::tis_site_config$Num.of.MLs[Noble::tis_site_config$SiteID==site]), f.test)
variance=data.frame(ML=c(seq(Noble::tis_site_config$Num.of.MLs[Noble::tis_site_config$SiteID==site]), "Mean"), f.test)
out=c("Mean Variance"=variance, "Internal Correlation"=sman.rho, "External Correlation"=rho)
out
out=list("Mean Variance"=variance, "Internal Correlation"=sman.rho, "External Correlation"=rho)
out$`Mean Variance`
if(out$`Mean Variance`$f.test[nrow(out$`Mean Variance`$ML)]>.95&out$`Mean Variance`$f.test[nrow(out$`Mean Variance`$ML)]<1.05){var.result="Pass"}else{var.result="Fail"}
out$`Mean Variance`$f.test[nrow(out$`Mean Variance`$ML)]
out$`Mean Variance`$f.test
out$`Mean Variance`$f.test[length(out$`Mean Variance`$ML)]
if(out$`Mean Variance`$f.test[length(out$`Mean Variance`$ML)]>.95&out$`Mean Variance`$f.test[length(out$`Mean Variance`$ML)]<1.05){var.result="Pass"}else{var.result="Fail"}
out$`Internal Correlation`$internal.rho
if(out$`Internal Correlation`$internal.rho[out$`Internal Correlation`$internal.rho]>.95){var.result="Pass"}else{var.result="Fail"}
if(out$`Internal Correlation`$internal.rho[length(out$`Internal Correlation`$internal.rho)]>.95){var.result="Pass"}else{var.result="Fail"}
if(out$`Mean Variance`$f.test[length(out$`Mean Variance`$ML)]>.95&out$`Mean Variance`$f.test[length(out$`Mean Variance`$ML)]<1.05){var.result="Pass"}else{var.result="Fail"}
if(out$`Internal Correlation`$internal.rho[length(out$`Internal Correlation`$internal.rho)]>.95){int.cor.result="Pass"}else{int.cor.result="Fail"}
if(out$`External Correlation`>0.95){ext.cor.result="Pass"}else{ext.cor.result="Fail"}
ext.cor.result
all(c(var.result, int.cor.result, ext.cor.result))=="Pass"
all(c(var.result, int.cor.result, ext.cor.result))
?all
c(var.result, int.cor.result, ext.cor.result)
if(all(c(var.result, int.cor.result, ext.cor.result)=="Pass")){result="Fail"}
if(all(c(var.result, int.cor.result, ext.cor.result)=="Pass")){result="Pass"}
result
if(all(c(var.result, int.cor.result, ext.cor.result)=="Pass")){result="Pass"}else{result="Fail"}
result
writeLines(text=out, con = "~/Desktop/")
writeLines(text=out, con = "~/Desktop/test.txt")
writeLines(text=unlist(out), con = "~/Desktop/test.txt")
?writeLines
paste(out$`Mean Variance`)
list.dirs(save.dir)
## Use the Berkeley admission data as in Friendly (1995).
x <- aperm(UCBAdmissions, c(2, 1, 3))
dimnames(x)[[2]] <- c("Yes", "No")
names(dimnames(x)) <- c("Sex", "Admit?", "Department")
stats::ftable(x)
## Fourfold display of data aggregated over departments, with
## frequencies standardized to equate the margins for admission
## and sex.
## Figure 1 in Friendly (1994).
fourfoldplot(margin.table(x, c(1, 2)))
## Fourfold display of x, with frequencies in each table
## standardized to equate the margins for admission and sex.
## Figure 2 in Friendly (1994).
fourfoldplot(x)
## Fourfold display of x, with frequencies in each table
## standardized to equate the margins for admission. but not
## for sex.
## Figure 3 in Friendly (1994).
fourfoldplot(x, margin = 2)
data.dir=Noble:::.data.route(site = site, save.dir = save.dir)
data.dir
rad=Noble::parse.results(test.dir = "/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisRadiationProcessQuality/")
View(rad)
bgn.month="2018-03"
end.month=bgn.month
dpID="DP1.00023.001"
lapply(Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month),
function(x) Noble::tis.pq.test(site = x,
dpID = dpID,
prin.vars = c("inSW", "outLW"),
bgn.month = bgn.month,
end.month = end.month,
time.agr = 1,
package = "basic",
save.dir = "~/Desktop/"))
bgn.month="2018-03"
end.month=bgn.month
dpID="DP1.00023.001"
lapply(Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month),
function(x) Noble::tis.pq.test(site = x,
dpID = dpID,
prin.vars = c("inSW", "outLW"),
bgn.month = bgn.month,
end.month = end.month,
time.agr = 1,
package = "basic",
save.dir = "~/Desktop/"))
results=read.csv("~/Desktop/Common/results.csv")
View(results)
results[results$variable_tested=="outLW",]
View(results[results$variable_tested=="outLW",])
master.info=readxl::read_excel("../../../BioScience_Site Data/master_spreadsheet.xlsx")
master.info$`MAP (mm)`[master.info$`Site Code` %in% unique(results$site)]
MAP=master.info$`MAP (mm)`[master.info$`Site Code` %in% unique(results$site)]
Sites=master.info$`Site Code`[master.info$`Site Code` %in% unique(results$site)]
Sites
pcip.investigation=data.frame(MAP=MAP, Sites=Sites)
outLW=results[results$variable_tested=="outLW",]
pcip.investigation=data.frame(MAP=MAP, site=Sites)
merge(pcip.investigation, outLW)
pcip=merge(pcip.investigation, outLW)
View(pcip)
qplot(pcip$MAP, pcip$data_quantity)
qplot(pcip$MAP, pcip$data_quantity, label=site)
qplot(pcip$MAP, pcip$data_quantity, label=site)+geom_text(aes(label=pcip$site))
master.info=readxl::read_excel("../../../BioScience_Site Data/master_spreadsheet.xlsx")
MAP=master.info$`MAP (mm)`[master.info$`Site Code` %in% unique(results$site)]
pcip.investigation=data.frame(MAP=MAP, site=Sites)
outLW=results[results$variable_tested=="outLW",]
pcip=merge(pcip.investigation, outLW)
pcip
heath=lapply(pcip$site, function(x) mean(Noble::health.data(site = x, dpID = dpID, bgn.month = "2017-01", end.month = "2017-12", save.dir = tempdir())$Availability))
health
heath
pcip$health=heath
qplot(pcip$MAP, pcip$health, label=site)+geom_text(aes(label=pcip$site))
pcip$health=unlist(heath)
qplot(pcip$MAP, pcip$health, label=site)+geom_text(aes(label=pcip$site))
Noble::pull.n.plot(sites.req = "STEI", bgn.month = "2018-03", end.month = "2018-03", dpID = dpID, save.dir = "~/Desktop/")
Noble::pull.n.plot(sites.req = "WREF", bgn.month = "2018-03", end.month = "2018-03", dpID = dpID, save.dir = "~/Desktop/")
jsonlite::read_json(path="http://data.neonscience.org/api/v0/data/DP1.00041.001/ORNL/2016-10")
out=jsonlite::read_json(path="http://data.neonscience.org/api/v0/data/DP1.00041.001/ORNL/2016-10")
out$data
out$data$files
lapply(out$data$files, "[[", "name")
unlist(lapply(out$data$files, "[[", "name"))
temp=unlist(lapply(out$data$files, "[[", "name"))
grepl()
grepl(temp, pattern = "sensor")
temp[grepl(temp, pattern = "sensor")]
temp[!grepl(temp, pattern = "\\.csv")]
grep(temp, pattern = "\\.csv")
out=jsonlite::read_json(path="http://data.neonscience.org/api/v0/data/DP1.00041.001/ORNL/2018-03")
out=jsonlite::read_json(path="http://data.neonscience.org/api/v0/data/DP1.00041.001/CPER/2018-03")
lapply(out$data$files, "[[", "sensor")
lapply(out$data$files, "[[", "names")
lapply(out$data$files, "[[", "name")
unlist(lapply(out$data$files, "[[", "name"))
out=unlist(lapply(out$data$files, "[[", "name"))
out
out[grep(pattern = "sensor", x = out)]
grep(pattern = "sensor", x = out)
out$data$files[grep(pattern = "sensor", x = out)[1]]
out$data$files[[grep(pattern = "sensor", x = out)[1]]]
out=unlist(lapply(out$data$files, "[[", "name"))
out=jsonlite::read_json(path="http://data.neonscience.org/api/v0/data/DP1.00041.001/CPER/2018-03")
files=unlist(lapply(out$data$files, "[[", "name"))
out$data$files[[grep(pattern = "sensor", x = files)[1]]]
test=read.csv("https://neon-prod-pub-1.s3.data.neonscience.org/NEON.DOM.SITE.DP1.00041.001/PROV/CPER/20180301T000000--20180401T000000/basic/NEON.D10.CPER.DP1.00041.001.sensor_positions.20180410T051458Z.csv?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20180425T222229Z&X-Amz-SignedHeaders=host&X-Amz-Expires=3600&X-Amz-Credential=pub-internal-read%2F20180425%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Signature=69a5ed5d097c935d5db1d91fedbf0fdfd18e9985739684f8cabb79d3b94bf260")
test
View(test)
zoo::as.yearmon(Sys.Date())
zoo::as.yearmon(Sys.Date())-lubridate::months(1)
zoo::as.yearmon(Sys.Date())-
lubridate::period(units = "month")
?period
zoo::as.yearmon(Sys.Date())-
lubridate::weeks(4)
zoo::as.yearmon(Sys.Date()-lubridate::weeks(4))
month=(zoo::as.yearmon(Sys.Date()-lubridate::weeks(4)))
format(month, "%Y-%m")
month=format(zoo::as.yearmon(Sys.Date()-lubridate::weeks(4)), "%Y-%m")
month
month=format(zoo::as.yearmon(Sys.Date()-lubridate::weeks(4)), "%Y-%m")
out=jsonlite::read_json(path=paste0("http://data.neonscience.org/api/v0/data/", dpID, "/", site, "/", month))
files=unlist(lapply(out$data$files, "[[", "name"))
fiels
files
loc.url=out$data$files[[grep(pattern = "sensor", x = files)[1]]]
read.csv(file = loc.url)
loc.url=out$data$files[[grep(pattern = "sensor", x = files)[1]]]
loc.url
loc.url=out$data$files[[grep(pattern = "sensor", x = files)[1]]]$url
read.csv(file = loc.url)
loc.info=read.csv(file = loc.url)
View(loc.info)
dpID
loc.info=read.csv(file = loc.url, as.is = T )
loc.info$HOR.VER
as.character(loc.info$HOR.VER)
?read.csv
loc.info=read.csv(file = loc.url, as.is = 1 )
loc.info
stringr::str_split(loc.info$HOR.VER, "\\.")
raw.hor.vers=stringr::str_split(loc.info$HOR.VER, "\\.")
lapply(raw.hor.vers, function(x), if(length(x)==1){paste0("00", x, ".000")}
if(length(x)==2){paste0("000.", x, "0")})
lapply(raw.hor.vers, function(x), if(length(x)==1){paste0("00", x, ".000")}else if(length(x)==2){paste0("000.", x, "0")})
lapply(raw.hor.vers, function(x) if(length(x)==1){paste0("00", x, ".000")}else if(length(x)==2){paste0("000.", x, "0")})
lapply(raw.hor.vers, function(x) if(length(x)==1){paste0("00", x, ".000")}else if(length(x)==2){paste0(x[1],"00.", x[2], "0")})
lapply(raw.hor.vers, function(x) if(length(x)==1){if(x==9){paste0(x, "00", ".000")}else{paste0("00", x, ".000")}}else if(length(x)==2){paste0(x[1],"00.", x[2], "0")})
fomed.hor.vers=lapply(raw.hor.vers, function(x) if(length(x)==1){if(x==9){paste0(x, "00", ".000")}else{paste0("00", x, ".000")}}else if(length(x)==2){paste0(x[1],"00.", x[2], "0")})
unlist(formed.hor.vers)
formed.hor.vers=lapply(raw.hor.vers, function(x) if(length(x)==1){if(x==9){paste0(x, "00", ".000")}else{paste0("00", x, ".000")}}else if(length(x)==2){paste0(x[1],"00.", x[2], "0")})
unlist(formed.hor.vers)
loc.info$HOR.VER=unlist(formed.hor.vers)
View(loc.info)
return(loc.info)
library(Noble)
Noble::pull.dp.locs(site="CPER", "DP1.00001.001")
dpID="DP1.00041.001"
Noble::pull.dp.locs(site=site, dpID = dpID)
dpID="DP1.00041.001"
month=format(zoo::as.yearmon(Sys.Date()-lubridate::weeks(4)), "%Y-%m")
out=jsonlite::read_json(path=paste0("http://data.neonscience.org/api/v0/data/", dpID, "/", site, "/", month))
files=unlist(lapply(out$data$files, "[[", "name"))
loc.url=out$data$files[[grep(pattern = "sensor", x = files)[1]]]$url
loc.info=read.csv(file = loc.url)
raw.hor.vers=stringr::str_split(loc.info$HOR.VER, "\\.")
loc.info
formed.hor.vers=lapply(raw.hor.vers, function(x) if(length(x)==1){if(x==9){paste0(x, "00", ".000")}if(!x==9){paste0("00", x, ".000")}}else if(length(x)==2){paste0(x[1],"00.", x[2], "0")})
formed.hor.vers=lapply(raw.hor.vers, function(x) if(length(x)==1){if(x==9){paste0(x, "00", ".000")}else if(!x==9){paste0("00", x, ".000")}}else if(length(x)==2){paste0(x[1],"00.", x[2], "0")})
formed.hor.vers
raw.hor.vers
raw.hor.vers[1]
x=raw.hor.vers[1]
grepl(x[2], pattern = "^5")
x[2]
x[[2]]
x
unlist(x)[2]
grepl(unlist(x)[2], pattern = "^5")
length(x)==2
length(unlist(x))==2
paste0( "00", unlist(x)[1],".", unlist(x)[2])
source('~/Dropbox/GitHub/Noble-Package/Noble/R/pull_dp_locs.R', echo=TRUE)
pull.dp.locs()
pull.dp.locs(site, dpIF)
pull.dp.locs(site, dpID)
!grepl(unlist(x)[2], pattern = "^5")
source('~/Dropbox/GitHub/Noble-Package/Noble/R/pull_dp_locs.R')
!grepl(unlist(x)[2], pattern = "^5")
pull.dp.locs(site, dpID)
library(Noble)
dpID="DP1.00041.001"
locs=Noble::pull.dp.locs(site=site, dpID = dpID)
locs
date=as.POSIXct(date, tz="UTC")
date="2018-01-02 00:00:30"
date=as.POSIXct(date, tz="UTC")
month=format(zoo::as.yearmon(date), "%Y-%m")
data=Noble::data.pull(site = site, dpID = dpID, bgn.month = month, end.month = month, time.agr = 30, package = "basic", save.dir = tempdir(), complete.times = F)
data[data$startDateTime==date]
date
data$startDateTime
data[data$startDateTime==date,]
data$startDateTime==date
which(data$startDateTime==date)
dpID="DP1.00041.001"
date=as.POSIXct(date, tz="UTC")
month=format(zoo::as.yearmon(date), "%Y-%m")
data=Noble::data.pull(site = site, dpID = dpID, bgn.month = month, end.month = month, time.agr = 30, package = "basic", save.dir = tempdir(), complete.times = F)
locs=Noble::pull.dp.locs(site=site, dpID = dpID)
data[data$startDateTime==date,]
date
View(data)
View(data)
source('~/Dropbox/GitHub/Noble-Package/Noble/R/pull_dp_locs.R', echo=TRUE)
date="2018-02-30 12:00:00"
dpID="DP1.00041.001"
date=as.POSIXct(date, tz="UTC")
month=format(zoo::as.yearmon(date), "%Y-%m")
date=as.POSIXct(date, tz="UTC", format="%Y-%m-%d %H:%M:%S")
month=format(zoo::as.yearmon(date), "%Y-%m")
data=Noble::data.pull(site = site, dpID = dpID, bgn.month = month, end.month = month, time.agr = 30, package = "basic", save.dir = tempdir(), complete.times = F)
month
month=format(zoo::as.yearmon(date), "%Y-%m")
date="2018-02-30 12:00:00"
month=format(zoo::as.yearmon(date), "%Y-%m")
zoo::as.yearmon(date)
date="2018-02-25 12:00:00"
dpID="DP1.00041.001"
month=format(zoo::as.yearmon(date), "%Y-%m")
date=as.POSIXct(date, tz="UTC", format="%Y-%m-%d %H:%M:%S")
data=Noble::data.pull(site = site, dpID = dpID, bgn.month = month, end.month = month, time.agr = 30, package = "basic", save.dir = tempdir(), complete.times = F)
site="CPER"
data=Noble::data.pull(site = site, dpID = dpID, bgn.month = month, end.month = month, time.agr = 30, package = "basic", save.dir = tempdir(), complete.times = F)
locs=Noble::pull.dp.locs(site=site, dpID = dpID)
data[data$startDateTime==date,]
day.ta=data[data$startDateTime==date,]
date_ta=data[data$startDateTime==date,]
locs$HOR.VER
plot.data=data.frame(locs=locs$HOR.VER, depths=locs$zOffset)
plot.data$value=grep(pattern = "soilTempMean", colnames(date_ta))
plot.data$value
plot.data$value= colnames(date_ta)[grep(pattern = "soilTempMean", colnames(date_ta))]
plot.data$value
View(plot.data)
lot.data$plot=stringr::str_split(string = plot.data$locs, pattern = ".")
plot.data$plot=stringr::str_split(string = plot.data$locs, pattern = ".")
plot.data$plot=stringr::str_split(string = plot.data$locs, pattern = "\\.")
plot.data$plot=stringr::str_split(string = plot.data$locs, pattern = "\\.")[1]
soil.temp.plot=function(site, date){
dpID="DP1.00041.001"
month=format(zoo::as.yearmon(date), "%Y-%m")
date=as.POSIXct(date, tz="UTC", format="%Y-%m-%d %H:%M:%S")
data=Noble::data.pull(site = site, dpID = dpID, bgn.month = month, end.month = month, time.agr = 30, package = "basic", save.dir = tempdir(), complete.times = F)
locs=Noble::pull.dp.locs(site=site, dpID = dpID)
date_ta=data[data$startDateTime==date,]
plot.data=data.frame(locs=locs$HOR.VER, depths=locs$zOffset)
plot.data$value= colnames(date_ta)[grep(pattern = "soilTempMean", colnames(date_ta))]
plot.data$plot=stringr::str_split(string = plot.data$locs, pattern = "\\.")[1]
}
plot.data$plot=unlist(stringr::str_split(string = plot.data$locs, pattern = "\\."))[1]
plot.data$plot=gsub(x = unlist(stringr::str_split(string = plot.data$locs, pattern = "\\."))[1], pattern = "00", replacement = "")
plot.data$plot=as.factor(gsub(x = unlist(stringr::str_split(string = plot.data$locs, pattern = "\\."))[1], pattern = "00", replacement = ""))
,
stringr::str_split(string = plot.data$locs, pattern = "\\.")#[1], pattern = "00", replacement = "")
lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[")#[1], pattern = "00", replacement = "")
lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1)#[1], pattern = "00", replacement = "")
gsub(x=lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1), pattern = "00", replacement = "")
plot.data$plot=as.factor(gsub(x=lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1), pattern = "00", replacement = ""))
plot.data$plot=as.factor(gsub(x=lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1), pattern = "00", replacement = ""))
plot.data=data.frame(locs=locs$HOR.VER, depths=locs$zOffset)
plot.data$plot=as.factor(gsub(x=lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1), pattern = "00", replacement = ""))
plot.data$value= colnames(date_ta)[grep(pattern = "soilTempMean", colnames(date_ta))]
reshape2::french_fries
reshape2::melt(date_ta)
view(reshape2::melt(date_ta))
plot.data$variable= date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))]
plot.data$variable= c(date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))])
plot.data=data.frame(locs=locs$HOR.VER, depths=locs$zOffset)
plot.data$plot=as.factor(gsub(x=lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1), pattern = "00", replacement = ""))
plot.data$variable= colnames(date_ta)[grep(pattern = "soilTempMean", colnames(date_ta))]
plot.data$value= c(date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))])
plot.data$value
reshape2::melt(plot.data, id.vars="plort")
reshape2::melt(plot.data, id.vars="plot")
reshape2::melt(plot.data)
plot.data=data.frame(locs=locs$HOR.VER, depths=locs$zOffset)
plot.data$plot=gsub(x=lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1), pattern = "00", replacement = "")
plot.data$variable= colnames(date_ta)[grep(pattern = "soilTempMean", colnames(date_ta))]
plot.data$value= c(date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))])
reshape2::melt(plot.data)
plot.data=data.frame(locs=locs$HOR.VER, depths=locs$zOffset)
plot.data$plot=gsub(x=lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1), pattern = "00", replacement = "")
plot.data$variable= colnames(date_ta)[grep(pattern = "soilTempMean", colnames(date_ta))]
plot.data$value= c(date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))])
reshape2::melt(plot.data)
lapply(plot.data, function(x) class(x))
reshape2::melt(plot.data, id.vars="plot")
plot.data$value= date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))]
date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))]
plot.data$value= as.numeric(date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))])
reshape2::melt(plot.data, id.vars="plot")
plot.data=data.frame(locs=locs$HOR.VER, depths=locs$zOffset)
plot.data$plot=gsub(x=lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1), pattern = "00", replacement = "")
plot.data$variable= colnames(date_ta)[grep(pattern = "soilTempMean", colnames(date_ta))]
plot.data$value= as.numeric(date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))])
View(plot.data)
reshape2::melt(plot.data, id.vars="plot")
plot.data=data.frame(locs=locs$HOR.VER, depth=locs$zOffset)
plot.data$plot=gsub(x=lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1), pattern = "00", replacement = "")
plot.data$variable= colnames(date_ta)[grep(pattern = "soilTempMean", colnames(date_ta))]
plot.data$value= as.numeric(date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))])
(7/44)*500
(7/44)*700
500-80
700-110
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path()+
ggplot2::facet_wrap(facets = .~plot)
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path()+
ggplot2::facet_wrap(facets = ~plot)
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path()+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(ggplot2::aes(color="dark red"))+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::labeller(title=paste0(site, " soil temperatures, ", date), x="Temperature (Degrees C)", y=("Depth (meters)"))+
ggplot2::theme_light()
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(ggplot2::aes(color="dark red"))+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::labeller(title=paste0(site, " soil temperatures, ", date), x="Temperature (Degrees C)", y="Depth (meters)")+
ggplot2::theme_light()
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(ggplot2::aes(color="dark red"))+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::labeller(title=paste0(site, " soil temperatures, ", date), xlab="Temperature (Degrees C)", ylab="Depth (meters)")+
ggplot2::theme_light()
paste0(site, " soil temperatures, ", date)
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(ggplot2::aes(color="dark red"))+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::ggtitle(title=paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(ggplot2::aes(color="dark red"))+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::ggtitle(paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(ggplot2::aes(color="dark red"))+
ggplot2::facet_wrap(facets = ~plot, nrow = 1, labeller = c("Plot 1", "Plot 2", "Plot 3", "Plot 4", "Plot 5"))+
ggplot2::ggtitle(paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(ggplot2::aes(color="dark red", legend(NULL)))+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::ggtitle(paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(ggplot2::aes(color="dark red", legend("")))+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::ggtitle(paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
plot.data=data.frame(locs=locs$HOR.VER, depth=locs$zOffset)
plot.data$plot=gsub(x=lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1), pattern = "00", replacement = "Plot ")
plot.data$variable= colnames(date_ta)[grep(pattern = "soilTempMean", colnames(date_ta))]
plot.data$value= as.numeric(date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))])
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(ggplot2::aes(color="dark red"))+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::ggtitle(paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
}
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(ggplot2::aes(color="dark red"))+
ggplot2::geom_point()+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::ggtitle(paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(ggplot2::aes(color="dark red"))+
ggplot2::geom_point(ggplot2::aes(color="red"))+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::ggtitle(paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(color="dark red")+
ggplot2::geom_point(ggplot2::aes(color="red"))+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::ggtitle(paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(color="dark red")+
ggplot2::geom_point(color="red")+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::ggtitle(paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
soil.temp.plot=function(site, date){
dpID="DP1.00041.001"
month=format(zoo::as.yearmon(date), "%Y-%m")
date=as.POSIXct(date, tz="UTC", format="%Y-%m-%d %H:%M:%S")
data=Noble::data.pull(site = site, dpID = dpID, bgn.month = month, end.month = month, time.agr = 30, package = "basic", save.dir = tempdir(), complete.times = F)
locs=Noble::pull.dp.locs(site=site, dpID = dpID)
date_ta=data[data$startDateTime==date,]
plot.data=data.frame(locs=locs$HOR.VER, depth=locs$zOffset)
plot.data$plot=gsub(x=lapply(stringr::str_split(string = plot.data$locs, pattern = "\\."), "[[", 1), pattern = "00", replacement = "Plot ")
plot.data$variable= colnames(date_ta)[grep(pattern = "soilTempMean", colnames(date_ta))]
plot.data$value= as.numeric(date_ta[,grep(pattern = "soilTempMean", colnames(date_ta))])
ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(color="dark red")+
ggplot2::geom_point(color="red")+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::ggtitle(paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
}
soil.temp.plot(site="HEAL", "2017-12-29 00:00:30")
soil.temp.plot(site="HEAL", "2017-12-29 00:30:00")
soil.temp.plot(site="HEAL", "2017-12-30 00:30:00")
soil.temp.plot(site="HEAL", "2017-11-01 00:30:00")
soil.temp.plot(site="HEAL", "2017-10-01 00:30:00")
soil.temp.plot(site="HEAL", "2017-11-01 00:30:00")
soil.temp.plot(site="HEAL", "2017-12-30 00:30:00")
plot=ggplot2::ggplot(data = plot.data, ggplot2::aes(x=value, y=depth))+
ggplot2::geom_path(color="dark red")+
ggplot2::geom_point(color="red")+
ggplot2::facet_wrap(facets = ~plot, nrow = 1)+
ggplot2::ggtitle(paste0(site, " soil temperatures, ", date, " UTC"))+
ggplot2::xlab("Temperature (Degrees C)")+
ggplot2::ylab("Depth (meters)")+
ggplot2::theme_light()
return(plot)
