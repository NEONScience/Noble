t.new
httr::PUT(url = ticket.path, body = t.new)
t.sn.update=list(fields=list(customfield_11601=sn.field))
toJSON(t.sn.update)
t.sn.update=jsonlite::toJSON(list(fields=list(customfield_11601=sn.field)))
httr::PUT(url = ticket.path, body = t.sn.update)
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'application/json')
t.sn.update=list(fields=list(customfield_11601=sn.field))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'application/json')
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=c(customfield_11601=sn.field))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list("fields"=c(customfield_11601=sn.field))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
fields=list("summary"="test")
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
fields=list(fields=list("summary"="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
fields=list(fields=c("summary"="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=c("summary"="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=toJSON(list(fields=c("summary"="test")))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=c("summary"="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=c(summary="test"))
toJSON(t.sn.update)
t.sn.update=list(fields=list(summary="test"))
toJSON(t.sn.update)
t.sn.update=list(fields=list(description="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list(customfield_11601="test"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list(customfield_11601=12901))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list(customfield_11601="12901"))
source('~/Dropbox/NEON/jira_to_servicenow.R', echo=TRUE)
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list("customfield_11601"="12901"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list("customfield_11601"="12901"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(fields=list("customfield_11601"=12901))
toJSON(t.sn.update)
t.sn.update=list(fields=list("customfield_11601"="12901"))
toJSON(t.sn.update)
t.sn.update=list(update=list("customfield_11601"=list(set=12901)))
httr::PUT(url = ticket.path, body = t.sn.update, encode = 'json')
t.sn.update=list(update=list(customfield_11601=list(set=12901)))
toJSON(t.sn.update)
t.sn.update=jsonlite::toJSON(list(update=list(customfield_11601=list(set=12901))))
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "[")
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\[")
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[")
t.sn.update
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[|\\]")
httr::PUT(url = ticket.path, body = t.sn.update)
t.sn.update
t.sn.update=jsonlite::toJSON(list(fields=list(customfield_11601=12901)))
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[|\\]")
httr::PUT(url = ticket.path, body = t.sn.update)
t.sn.update=jsonlite::toJSON(list(fields=list(customfield_11601=12901)))
httr::PUT(url = ticket.path, body = t.sn.update)
t.sn.update
#login for a session
httr::POST(url="https://neoninc.atlassian.net/rest/auth/1/session", body = list(username=username, password=password), encode = "json") #This works to login (status 200)
httr::PUT(url = ticket.path, body = t.sn.update, encode = json)
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=jsonlite::toJSON(list(fields=list(customfield_11601=12901)))
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[|\\]")
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=jsonlite::toJSON(list(fields=list(customfield_11601=12901)))
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[|\\]")
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
httr::PUT(url = ticket.path, body = t.sn.update)#, encode = "json")
t.sn.update=jsonlite::toJSON(list(fields=list(description=12901)))
httr::PUT(url = ticket.path, body = t.sn.update)#, encode = "json")
t.sn.update=gsub(t.sn.update, replacement = "", pattern = "\\[|\\]")
httr::PUT(url = ticket.path, body = t.sn.update)#, encode = "json")
t.sn.update=jsonlite::toJSON(list(fields=list(description=12901)))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list(description=12901))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list("description"=12901))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list("description"="12901"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list(customfield_11601"="12901"))
t.sn.update=list(fields=list("customfield_11601"="12901"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list("customfield_11601"="None"))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
t.sn.update=list(fields=list("customfield_11601"=-1))
httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
out=httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
fromJSON(rawToChar(out))
fromJSON(rawToChar(out$content))
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option")
ticket=jsonlite::fromJSON(base::rawToChar(temp$content))
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option")
ticket=jsonlite::fromJSON(base::rawToChar(sn.field.options$content))
ticket
t.content$fields$customfield_11601
t.sn.update=list(fields=list("customfield_11601"=list("self"=paste0("https://neoninc.atlassian.net/rest/api/2/customFieldOption/12904", "value"="Knowledge Base", "id"=12904))))
out=httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
fromJSON(rawToChar(out$content))
sn.field.options=httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option/suggestions/edit/")
sn.field.options
t.sn.update=list(fields=list("customfield_11601"=list("self"=paste0("https://neoninc.atlassian.net/rest/api/2/customFieldOption/12904", "value"="Knowledge Base", "id"=12904))))
toJSON(t.sn.update)
t.sn.update=list(fields=list("customfield_11601"=list("self"=paste0("https://neoninc.atlassian.net/rest/api/2/customFieldOption/12904", "value"="Knowledge Base", "id"=12904))))
t.sn.update=list(fields=list("customfield_11601"=list("self"=paste0("https://neoninc.atlassian.net/rest/api/2/customFieldOption/",12904), "value"="Knowledge Base", "id"=12904)))
toJSON(t.sn.update)
out=httr::PUT(url = ticket.path, body = t.sn.update, encode = "json")
out
fromJSON(rawToChar(out$content))
httr::get("https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option/-1" )
httr::GET("https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option/-1" )
httr::GET("https://neoninc.atlassian.net/rest/api/2/field/11601/option/-1")
httr::GET("https://neoninc.atlassian.net/rest/api/2/field/11601/option/")
httr::GET("https://neoninc.atlassian.net/rest/api/2/field/customfield_11601/option/")
httr::GET("https://neoninc.atlassian.net/rest/api/2/issue/NEON-11601/watchers/")
rawToChar(httr::GET("https://neoninc.atlassian.net/rest/api/2/issue/NEON-11601/watchers/"))
rawToChar(httr::GET("https://neoninc.atlassian.net/rest/api/2/issue/NEON-11601/watchers/")$content)
fromJSON(rawToChar(httr::GET("https://neoninc.atlassian.net/rest/api/2/issue/NEON-11601/watchers/")$content))
t.sn.update='{fields:{"customfield_11601": 12901}}'
out=httr::PUT(url = ticket.path, body = t.sn.update)
httr::PUT(url = ticket.path, body = t.sn.update)
httr::PUT(url = ticket.path, body = t.sn.update, encode = "raw")
fromJSON(t.sn.update)
t.sn.update='{"fields": {"customfield_11601": 12901}}'
fromJSON(t.sn.update)
t.sn.update=charToRaw('{"fields": {"customfield_11601": 12901}}')
httr::PUT(url = ticket.path, body = t.sn.update, encode = "raw")
t.sn.update='{"fields": {"customfield_11601": 12901}}'
fromJSON(t.sn.update)
fromJSON(t.sn.update, flatten = )
system("open 'smb://rlee:N0rr!sGB@eco.neoninternal.org/neon'")
# EDIT
test = "TIS Radiation Process Quality "
testSubDir = "TisRadiationProcessQuality"
if(grepl("darwin", version$os))
{
mountPoint<-"/Volumes/neon/" #Mac
}else{
mountPoint<-"N:/" #Windows
}
dirCommBase = paste0(mountPoint, "Science/Science Commissioning Archive/SiteAndPayload/")
# should not need to edit these...
myTitle = paste("TIS Commissioning Test Report:", test, "Assessment")
rmdFile = paste( testSubDir, ".Rmd", sep="")
testFullDir = paste(dirCommBase, testSubDir, "/", sep="")
dir = testFullDir
## RAD PQ test
### General Params
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC", "DSNY", "LAJA", "GUAN", "UNDE", "UKFS", "KONZ", "KONA", "ORNL", "MLBS", "GRSM", "TALL", "LENO", "DELA", "WOOD", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES", "CLBJ", "NIWO", "MOAB",  "SRER", "JORN", "ONAQ", "ABBY", "SJER", "BARR", "HEAL", "TOOL", "DEJU", "OAES")
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
bad.sites=c("SJER")
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
save.dir = dir
bgn.month = "2017-12"
end.month = "2017-12"
time.agr = 30
package = "basic"
#### THIS BIT GENERATES PARSED RESUTLS DF
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
view(parsed.results)
Noble::rad_dq_info
# EDIT
test = "TIS Radiation Data Quality "
testSubDir = "TisRadiationDataQuality"
if(grepl("darwin", version$os))
{
mountPoint<-"/Volumes/neon/" #Mac
}else{
mountPoint<-"N:/" #Windows
}
dirCommBase = paste0(mountPoint, "Science/Science Commissioning Archive/SiteAndPayload/")
# should not need to edit these...
myTitle = paste("TIS Commissioning Test Report:", test, "Assessment")
rmdFile = paste( testSubDir, ".Rmd", sep="")
testFullDir = paste(dirCommBase, testSubDir, "/", sep="")
dq.sites=c("BART", "JERC", "WOOD", "KONZ", "KONA", "CPER", "JORN", "BARR", "HEAL")
save.dir = dir
time.agr = 30
package = "basic"
dir = testFullDir
pqResults=read.csv(paste0(dirCommBase, "TisRadiationProcessQuality/Common/summary_results.csv"))
test.sites=pqResults[pqResults$passed&pqResults$site %in%dq.sites,]
### NO TEST ##
lapply(seq(length(test.sites)), function(x) try(Noble::rad.dq.test(site=test.sites$site[x],
save.dir = dir,
bgn.month = test.sites$bgn[x],
end.month = test.sites$end[x]
)
))
full.results=read.csv(Noble:::.result.route(dir))
row.indx=unlist(lapply(unique(full.results$site), function(s) max(which(full.results$site %in% s))))
parsed.results=full.results[row.indx,]
View(parsed.results
)
system("open 'smb://rlee:N0rr!sGB@eco.neoninternal.org/neon'")
test <- "TIS Fan Aspiration System Performance "
testSubDir <- "TisFanAspirationSystemPerformance"
if(grepl("darwin", version$os))
{
dirCommBase<-"/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/"
}else{
dirCommBase<-"N:/Science/Science Commissioning Archive/SiteAndPayload/"
}
# should not need to edit these...
myTitle <- paste("TIS Commissioning Test Report:", test, "Assessment")
rmdFile <- paste( testSubDir, ".Rmd", sep="")
testFullDir <- paste(dirCommBase, testSubDir, sep="")
### General Params
time.agr = 30
package = "basic"
bgn.month = "2018-01"
end.month = "2018-02"
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC", "DSNY", "LAJA", "GUAN", "UNDE", "UKFS", "KONZ", "KONA", "ORNL", "MLBS", "GRSM", "TALL", "LENO", "DELA", "WOOD", "TREE", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES", "CLBJ", "NIWO", "MOAB",  "SRER", "JORN", "ONAQ", "ABBY", "SJER", "BARR", "TOOL", "DEJU", "HEAL")
passed.sites=c()
bad.sites=c("ABBY", "SJER", "NOGP", "SRER")
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
test.sites=test.sites[-which(test.sites %in% bad.sites)]
## NO TESTS ##
#test.sites=c()
for(i in 1:length(test.sites)){
sink<-try(
Noble::fan.test(site = test.sites[i], bgn.month = bgn.month, end.month = end.month, save.dir=testFullDir)
)
}
system("open 'smb://rlee:N0rr!sGB@eco.neoninternal.org/neon'")
cos(80*pi/180)
0.17365/110
cos(80*pi/180)/110
cos(60*pi/180)/110
cos(400*pi/180)/110
cos(40*pi/180)/110
cos(0*pi/180)/110
cos(300*pi/180)/110
plot(seq(90), y = cos(seq(90)*pi/180)/110)
plot(seq(-90, 90), y = cos(seq(-90, 90)*pi/180)/110)
cos(0*pi/180)/110
cos(0*pi/180)*110
cos(80*pi/180)*110
cos(60*pi/180)*110
system("open 'smb://rlee:N0rr!sGB@eco.neoninternal.org/neon'")
read.delim(file="~/Downloads/wss_datapub_NEONDOC004737-1.txt")
rawIn=read.delim(file="~/Downloads/wss_datapub_NEONDOC004737-1.txt")
raw
gsub(pattern = "Weather summary statistics", replacement = "Summary weather statistics", x = rawIn$DPName)
rawIn$DPName=gsub(pattern = "Weather summary statistics", replacement = "Summary weather statistics", x = rawIn$DPName)
write.table(rawIn, file = "~/Desktop/wss_datapub_NEONDOC004737,.txt",row.names = F)
write.table(rawIn, file = "~/Desktop/wss_datapub_NEONDOC004737,.txt",row.names = F, quote = T, sep = "\t")
rawIn$dataCategory=tolower(rawIn$dataCategory)
write.table(rawIn, file = "~/Desktop/wss_datapub_NEONDOC004737.txt",row.names = F, quote = T, sep = "\t")
rawIn$dataCategory=trimws(rawIn$dataCategory)
write.table
write.table(rawIn, file = "~/Desktop/wss_datapub_NEONDOC004737.txt",row.names = F, quote = T, sep = "\t")
i=2
class(rawIn[,i])
for(i in 1:length(rawIn)){
if(class(rawIn[,i])=="character"){
rawIn[,i]=trimws(rawIn[,i])
}
}
rawIn
rawIn=read.delim(file="~/Downloads/wss_datapub_NEONDOC004737-1.txt")
rawIn$DPName=gsub(pattern = "Weather summary statistics", replacement = "Summary weather statistics", x = rawIn$DPName)
rawIn$dataCategory=tolower(rawIn$dataCategory)
rawIn$dataCategory=trimws(rawIn$dataCategory)
for(i in 1:length(rawIn)){
if(class(rawIn[,i])=="character"){
rawIn[,i]=trimws(rawIn[,i])
}
}
write.table(rawIn, file = "~/Desktop/wss_datapub_NEONDOC004737.txt",row.names = F, quote = T, sep = "\t")
rawIn=read.delim(file="~/Downloads/wss_datapub_NEONDOC004737-1.txt")
rawIn$DPName=gsub(pattern = "Weather summary statistics", replacement = "Summary weather statistics", x = rawIn$DPName)
for(i in 1:length(rawIn)){
if(class(rawIn[,i])=="character"){
rawIn[,i]=trimws(rawIn[,i])
}
}
write.table(rawIn, file = "~/Desktop/wss_datapub_NEONDOC004737.txt",row.names = F, quote = T, sep = "\t")
View(rawIn)
rawIn$dataType[rawIn$fieldName=="year"]="dateTime"
rawIn=read.delim(file="~/Downloads/wss_datapub_NEONDOC004737-1.txt")
rawIn$DPName=gsub(pattern = "Weather summary statistics", replacement = "Summary weather statistics", x = rawIn$DPName)
# rawIn$dataCategory=tolower(rawIn$dataCategory)
# rawIn$dataCategory=trimws(rawIn$dataCategory)
for(i in 1:length(rawIn)){
if(class(rawIn[,i])=="character"){
rawIn[,i]=trimws(rawIn[,i])
}
}
rawIn$dataType[rawIn$fieldName=="year"]="dateTime"
write.table(rawIn, file = "~/Desktop/wss_datapub_NEONDOC004737.txt",row.names = F, quote = T, sep = "\t")
rawIn$fieldType[rawIn$fieldName=="year"]="resultStartDate"
write.table(rawIn, file = "~/Desktop/wss_datapub_NEONDOC004737.txt",row.names = F, quote = T, sep = "\t")
system("open 'smb://rlee:N0rr!sGB@eco.neoninternal.org/neon'")
data.frame(
Resort=c("Mont Tremblant", "Sugarbush" "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky",
"Mammoth Mountain", "Steamboat", "Eldora", "Ski Portillo", "Mauna Kea" "McMurdo Station", "Chamonix",
"Aleyska", "Nagano", "Afriski"),
Lat=c(46.208697, 44.12945592, 44.2172719, 37.5966391, 51.0088081, 51.1774496, 45.2578915,
37.6508713, 39.1969825, 40.4571748, 39.9372203, -32.8356074, 19.8206093, 77.8401191, 45.9320419,
60.8633302, 36.7104807, -28.823070),
Lon=c(-74.5846368, -72.9122709, -69.1368581, -81.1273516, -118.2649697, -115.5732091, -111.4000167,
119.0389953, -120.2387614, -106.8067214, 105.5848673, -70.131478, -155.4856032, 166.6445298, 6.8589211,
-148.7176637, 137.6736863, 28.728593)
)
Resort=c("Mont Tremblant", "Sugarbush" "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky",
"Mammoth Mountain", "Steamboat", "Eldora", "Ski Portillo", "Mauna Kea" "McMurdo Station", "Chamonix",
"Aleyska", "Nagano", "Afriski"),
Resort=c("Mont Tremblant", "Sugarbush" "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky",
"Mammoth Mountain", "Steamboat", "Eldora", "Ski Portillo", "Mauna Kea" "McMurdo Station", "Chamonix",
"Aleyska", "Nagano", "Afriski")
data.frame(
Resort=c("Mont Tremblant", "Sugarbush" "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky","Mammoth Mountain", "Steamboat", "Eldora", "Ski Portillo", "Mauna Kea" "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski"),
Lat=c(46.208697, 44.12945592, 44.2172719, 37.5966391, 51.0088081, 51.1774496, 45.2578915, 37.6508713, 39.1969825, 40.4571748, 39.9372203, -32.8356074, 19.8206093, 77.8401191, 45.9320419, 60.8633302, 36.7104807, -28.823070),
Lon=c(-74.5846368, -72.9122709, -69.1368581, -81.1273516, -118.2649697, -115.5732091, -111.4000167, 119.0389953, -120.2387614, -106.8067214, 105.5848673, -70.131478, -155.4856032, 166.6445298, 6.8589211, -148.7176637, 137.6736863, 28.728593)
)
data.frame(
Resort=c("Mont Tremblant", "Sugarbush", "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky","Mammoth Mountain", "Steamboat", "Eldora", "Ski Portillo", "Mauna Kea" "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski"),
Lat=c(46.208697, 44.12945592, 44.2172719, 37.5966391, 51.0088081, 51.1774496, 45.2578915, 37.6508713, 39.1969825, 40.4571748, 39.9372203, -32.8356074, 19.8206093, 77.8401191, 45.9320419, 60.8633302, 36.7104807, -28.823070),
Lon=c(-74.5846368, -72.9122709, -69.1368581, -81.1273516, -118.2649697, -115.5732091, -111.4000167, 119.0389953, -120.2387614, -106.8067214, 105.5848673, -70.131478, -155.4856032, 166.6445298, 6.8589211, -148.7176637, 137.6736863, 28.728593)
)
Resort=c("Mont Tremblant", "Sugarbush", "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky","Mammoth Mountain", "Steamboat", "Eldora", "Ski Portillo", "Mauna Kea" "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski"),
Resort=c("Mont Tremblant", "Sugarbush", "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky","Mammoth Mountain", "Steamboat", "Eldora", "Ski Portillo", "Mauna Kea" "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski")
data.frame(
Resort=c("Mont Tremblant", "Sugarbush", "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky","Mammoth Mountain", "Steamboat", "Eldora", "Ski Portillo", "Mauna Kea", "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski"),
Lat=c(46.208697, 44.12945592, 44.2172719, 37.5966391, 51.0088081, 51.1774496, 45.2578915, 37.6508713, 39.1969825, 40.4571748, 39.9372203, -32.8356074, 19.8206093, 77.8401191, 45.9320419, 60.8633302, 36.7104807, -28.823070),
Lon=c(-74.5846368, -72.9122709, -69.1368581, -81.1273516, -118.2649697, -115.5732091, -111.4000167, 119.0389953, -120.2387614, -106.8067214, 105.5848673, -70.131478, -155.4856032, 166.6445298, 6.8589211, -148.7176637, 137.6736863, 28.728593)
)
data.frame(
Resort=c("Mont Tremblant", "Sugarbush", "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky",  "Mammoth Mountain", "Steamboat", "Eldora",   "Ski Portillo", "Mauna Kea", "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski"),
Lat=c(   46.208697,         44.12945592, 44.2172719,         37.5966391,   51.0088081,  51.1774496,      45.2578915, 37.6508713,          39.1969825, 40.4571748,  -32.8356074,   19.8206093,   -77.8401191,      45.9320419, 60.8633302, 36.7104807, -28.823070),
Lon=c(-74.5846368, -72.9122709, -69.1368581, -81.1273516, -118.2649697, -115.5732091, -111.4000167, 119.0389953, -120.2387614, -106.8067214, 105.5848673, -70.131478, -155.4856032, 166.6445298, 6.8589211, -148.7176637, 137.6736863, 28.728593)
)
data.frame(
Resort=c("Mont Tremblant", "Sugarbush", "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky",   "Mammoth Mountain", "Steamboat", "Eldora",   "Ski Portillo", "Mauna Kea", "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski"),
Lat=c(   46.208697,         44.12945592, 44.2172719,         37.5966391,   51.0088081,  51.1774496,      45.2578915,   37.6508713,          39.1969825, 40.4571748,  -32.8356074,   19.8206093,   -77.8401191,      45.9320419, 60.8633302, 36.7104807, -28.823070),
Lon=c(   -74.5846368,       -72.9122709, -69.1368581,       -81.1273516,  -118.2649697, -115.5732091,    -111.4000167, 119.0389953,      -106.8067214, -105.5848673, -70.131478,    -155.4856032, 166.6445298,      6.8589211, -148.7176637, 137.6736863, 28.728593)
)
resorts=data.frame(
Resort=c("Mont Tremblant", "Sugarbush", "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky",   "Mammoth Mountain", "Steamboat", "Eldora",   "Ski Portillo", "Mauna Kea", "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski"),
Lat=c(   46.208697,         44.12945592, 44.2172719,         37.5966391,   51.0088081,  51.1774496,      45.2578915,   37.6508713,          39.1969825, 40.4571748,  -32.8356074,   19.8206093,   -77.8401191,      45.9320419, 60.8633302, 36.7104807, -28.823070),
Lon=c(   -74.5846368,       -72.9122709, -69.1368581,       -81.1273516,  -118.2649697, -115.5732091,    -111.4000167, 119.0389953,      -106.8067214, -105.5848673, -70.131478,    -155.4856032, 166.6445298,      6.8589211, -148.7176637, 137.6736863, 28.728593)
)
maps::area.map("world")
m=maps::map("world")
?maps::map
# Load packages
library(maps)
library(maptools)
library(RColorBrewer)
library(classInt)
library(gpclib)
library(mapdata)
# Define vector with the values that you would like to see plotted at desired lat/long. Your csv input file loaded as dataframe (Var) must feature the following columns (Site is optional, but useful for labeling)
Site,Para,Lat,Long
plotvar <- Var$Para
# Define number of colours to be used in plot
nclr <- 7
# Define colour palette to be used
plotclr <- brewer.pal(nclr,"RdPu")
# Define colour intervals and colour code variable for plotting
class <- classIntervals(plotvar, nclr, style = "pretty")
colcode <- findColours(class, plotclr)
# Plot the map with desired lat/long coordinates and data points with colour coding and legend
map("worldHires", xlim = c(-125, -55), ylim = c(30, 83))
points(Var$Long, Var$Lat, pch = 16, col= colcode, cex = 2)
legend("bottomright", legend = names(attr(colcode, "table")), fill = attr(colcode, "palette"), cex = 0.7, bty = "n")
points(resorts$Lat, resorts$Lon)
map("world")
graphics.off()
map("world")
points(resorts$Lat, resorts$Lon)
points(resorts$Lat, resorts$Lon)
points(resorts$Lat, resorts$Lon)
plot.new()
points(resorts$Lat, resorts$Lon)
library(maps)
library(mapdata)
library(maptools)  #for shapefiles
library(scales)  #for transparency
pcontorta <- readShapePoly("pinucont.shp")   #layer of data for species range
samps <- read.csv("FieldSamples.csv")   #my data for sampling sites, contains a column of "lat" and a column of "lon" with GPS points in decimal degrees
map("worldHires","Canada", xlim=c(-140,-110),ylim=c(48,64), col="gray90", fill=TRUE)  #plot the region of Canada I want
map("worldHires","usa", xlim=c(-140,-110),ylim=c(48,64), col="gray95", fill=TRUE, add=TRUE)  #add the adjacent parts of the US; can't forget my homeland
plot(pcontorta, add=TRUE, xlim=c(-140,-110),ylim=c(48,64), col=alpha("darkgreen", 0.6), border=FALSE)  #plot the species range
points(samps$lon, samps$lat, pch=19, col="red", cex=0.5)  #plot my sample sites
points(resorts$Lat, resorts$Lon)
mapproj::mapproject(x = resorts$Lat, y=resorts$Lon)
points(mapproj::mapproject(x = resorts$Lat, y=resorts$Lon))
maps::map(database = "world", projection = "gilbert")
maps::map(database = "world")
points(mapproj::mapproject(x = resorts$Lat, y=resorts$Lon))
plot(resorts$Lat, resorts$Lon)
plot( resorts$Lon,resorts$Lat)
maps::map(resorts$Lon,resorts$Lat)
maps::map(database = "world")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat)
points(coord)
maps::map(database = "world", orientation= c(90,0,225))
maps::map(database = "world", orientation= c(90,0,0))
maps::map(database = "world", orientation= c(90,0,0), projection = "mercator")
maps::map(database = "world", orientation= c(90,0,0), projection = "hex")
maps::map(database = "world", orientation= c(90,0,0), projection = "albers")
maps::map(database = "world", orientation= c(90,0,0), projection = "laue")
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert")
maps::map(database = "world", orientation= c(90,0,0), projection = "gall")
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord)
points(coord, col="Red")
points(coord, col="Red", cex=1)
points(coord, col="Red", cex=1, pch=3)
points(coord, col="Red", cex=1, pch=5)
points(coord, col="Red", cex=1, pch=8)
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert")
points(coord, col="Red", cex=1, pch=8)
resorts=data.frame(
Resort=c("Mont Tremblant", "Sugarbush", "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky",   "Mammoth Mountain", "Squaw Valley",  "Steamboat", "Eldora",   "Ski Portillo", "Mauna Kea", "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski"),
Lat=c(   46.208697,         44.12945592, 44.2172719,         37.5966391,   51.0088081,  51.1774496,      45.2578915,   37.6508713,        39.1969825,      40.4571748,   39.93774,   -32.8356074,   19.8206093,   -77.8401191,      45.9320419, 60.8633302, 36.7104807, -28.823070),
Lon=c(   -74.5846368,       -72.9122709, -69.1368581,       -81.1273516,  -118.2649697, -115.5732091,    -111.4000167, -119.0389953,      -120.2387614,    -106.8067214, -105.5848673, -70.131478,  -155.4856032, 166.6445298,      6.8589211, -148.7176637, 137.6736863, 28.728593)
)
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert", boundary = T)
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord, col="Red", cex=1, pch=8)
resorts=data.frame(
Resort=c("Mont Tremblant", "Sugarbush", "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky",   "Mammoth Mountain", "Squaw Valley",  "Steamboat", "Eldora",   "Ski Portillo", "Mauna Kea", "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski"),
Lat=c(   46.208697,         44.12945592, 44.2172719,         37.5966391,   51.0088081,  51.1774496,      45.2578915,   37.6508713,        39.1969825,      40.4571748,   39.93774,   -32.8356074,   19.8206093,   -77.8401191,      45.9320419, 60.8633302, 36.7104807, -28.823070),
Lon=c(   -74.5846368,       -72.9122709, -69.1368581,       -81.1273516,  -118.2649697, -115.5732091,    -111.4000167, -119.0389953,      -120.2387614,    -106.8067214, -105.5848673, -70.131478,  -155.4856032, 166.6445298,      6.8589211, -148.7176637, 137.6736863, 28.728593)
)
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert", boundary = T)
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert", boundary = T, col = "#fcdc8a")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert",fill=T, col = "#fcdc8a")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert",fill=T, col = "#f2fccc")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert",fill=T, col = "#f2fccc", bg = "#edf6f9")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
resorts=data.frame(
Resort=c("Mont Tremblant", "Sugarbush", "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky",   "Mammoth Mountain", "Squaw Valley",  "Steamboat", "Eldora",   "Ski Portillo", "Mauna Kea", "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski"),
Lat=c(   46.208697,         44.12945592, 44.2172719,         37.5966391,   51.0088081,  51.1774496,      45.2578915,   37.6508713,        39.1969825,      40.4571748,   39.93774,   -32.8356074,   19.8206093,   -77.8401191,      45.9320419, 60.8633302, 36.7104807, -28.823070),
Lon=c(   -74.5846368,       -72.9122709, -69.1368581,       -81.1273516,  -118.2649697, -115.5732091,    -111.4000167, -119.0389953,      -120.2387614,    -106.8067214, -105.5848673, -70.131478,  -155.4856032, 166.6445298,      6.8589211, -148.7176637, 137.6736863, 28.728593)
)
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert",fill=T, col = "#f2fccc", bg = "#edf6f9")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert",fill=T, col = "#f2fccc")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
resorts=data.frame(
Resort=c("Mont Tremblant", "Sugarbush", "Camden Snow Bowl", "Winterpace", "Revelstoke", "Ski Big Three", "Big Sky",   "Mammoth Mountain", "Squaw Valley",  "Steamboat", "Eldora",   "Ski Portillo", "Mauna Kea", "McMurdo Station", "Chamonix", "Aleyska", "Nagano", "Afriski"),
Lat=c(   46.208697,         44.12945592, 44.2172719,         37.5966391,   51.0088081,  51.1774496,      45.2578915,   37.6508713,        39.1969825,      40.4571748,   39.93774,   -32.8356074,   19.8206093,   -77.8401191,      45.9320419, 60.8633302, 36.7104807, -28.823070),
Lon=c(   -74.5846368,       -72.9122709, -69.1368581,       -81.1273516,  -118.2649697, -115.5732091,    -111.4000167, -119.0389953,      -120.2387614,    -106.8067214, -105.5848673, -70.131478,  -155.4856032, 166.6445298,      6.8589211, -148.7176637, 137.6736863, 28.728593)
)
maps::map(database = "world", orientation= c(90,10,0), projection = "gilbert",fill=T, col = "#f2fccc")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,10,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(80,0,0), projection = "gilbert",fill=T, col = "#f2fccc")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(80,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert",fill=T, col = "#f2fccc")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(90,0,10), projection = "gilbert",fill=T, col = "#f2fccc")
maps::map(database = "world", orientation= c(90,0,10), projection = "gilbert",fill=T, col = "#f2fccc")
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,10), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(90,0,0), projection = "gilbert",fill=T, col = "#f2fccc", boundary=F)
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(100,0,0), projection = "gilbert",fill=T, col = "#f2fccc", boundary=F)
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(100,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(100,40,0), projection = "gilbert",fill=T, col = "#f2fccc", boundary=F)
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(100,40,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(90,-40,0), projection = "gilbert",fill=T, col = "#f2fccc", boundary=F)
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,-40,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
maps::map(database = "world", orientation= c(90,-80,0),  projection = "gilbert",fill=T, col = "#f2fccc", boundary=F)
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,-80,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
e
e
e
maps::map(database = "world", orientation= c(90,0,0),  projection = "gilbert",fill=T, col = "#f2fccc", boundary=F)
coord=mapproj::mapproject(resorts$Lon,resorts$Lat, orientation= c(90,0,0), projection = "gilbert")
points(coord, col="#06a3d3", cex=1, pch=17)
source('~/Dropbox/NEON/mount_neon.R', echo=TRUE)
