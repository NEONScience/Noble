package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
passed.sites
bad.sites=c("SJER")
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
test.sites=test.sites[-which(test.sites %in% bad.sites)]
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
test.sites=test.sites[-which(test.sites %in% bad.sites)]
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-06"
end.month<-"2017-07"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-07"
end.month<-"2017-08"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-08"
end.month<-"2017-07"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
test.sites
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-08"
end.month<-"2017-07"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-08"
end.month<-"2017-07"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-08"
end.month<-"2017-09"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-09"
end.month<-"2017-10"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-10"
end.month<-"2017-11"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-11"
end.month<-"2017-12"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-05"
end.month<-"2017-06"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
test.sites="OAES"
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-05"
end.month<-"2017-06"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
test.sites="OSBS"
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
dir = testFullDir
dpID<-"DP1.00040.001"
prin.vars<-c("SHF")
bgn.month<-"2017-11"
end.month<-"2017-12"
package="basic"
time.agr = 30
tis_test_sites=Noble::test.sites(dpID = dpID, bgn.month = bgn.month, end.month = end.month)
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
#test.sites=test.sites[-which(test.sites %in% bad.sites)]
test.sites="OSBS"
if(!dir.exists(dir)){
dir.create(dir)
}
for(i in 1:length(test.sites)){
sink<-try(
Noble::tis.pq.test(site = test.sites[i], dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=testFullDir, prin.vars=prin.vars)
)
}
parsed.results=Noble::parse.results(test.dir=testFullDir, write.summary=T)
closeAllConnections()
system("open 'smb://rlee:M4mmoth!@eco.neoninternal.org/neon'")
hash
hash::values("M4mmoth!")
hash::make.keys()
hash::make.keys(ghjgds)
hash::make.keys("ghjgds")
dir = testFullDir
## RAD PQ test
### General Params
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC", "DSNY", "LAJA", "GUAN", "UNDE", "UKFS", "KONZ", "KONA", "ORNL", "MLBS", "GRSM", "TALL", "LENO", "DELA", "WOOD", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES", "CLBJ", "NIWO", "MOAB",  "SRER", "JORN", "ONAQ", "ABBY", "SJER", "BARR", "HEAL")
if(file.exists(paste0(dir, "/Common/summary_results.csv"))){
summary_results=read.csv(paste0(dir, "/Common/summary_results.csv"))
passed.sites=summary_results$site[as.logical(summary_results$passed)]
}else{passed.sites==c()}
#passed.sites=c("HARV", "BART",  "TREE", "KONA", "TOOL", "DEJU", "SERC", "KONZ", "BLAN") #?"JERC",
bad.sites=c("SJER")
test.sites=tis_test_sites[which(!tis_test_sites %in% passed.sites)] #filter out sites that passed testing
test.sites=test.sites[-which(test.sites %in% bad.sites)]
if(!dir.exists(dir)){
dir.create(dir)
}
save.dir = dir
bgn.month = "2016-11"
end.month = "2016-12"
time.agr = 30
package = "basic"
### NO TEST ##
#test.sites=c()
##############
###BGN Dircet and Diffuse Rad #########
dpID="DP1.00014.001"
prin.vars=c("difRad", "gloRad")
sink=lapply(test.sites, function(x) try(Noble::tis.pq.test(site = x, dpID = dpID, bgn.month = bgn.month, end.month = end.month,
time.agr = time.agr, package=package, save.dir=save.dir, prin.vars=prin.vars)))
Noble::gap.report(site = "DSNY", dpID = "DP1.00001.001", bgn.month = "2017-10", end.month = "2017-12", save.dir = "~/Desktop/")
Noble::gap.vis(site = "DSNY", dpID = "DP1.00001.001", bgn.month = "2017-10", end.month = "2017-12", save.dir = "~/Desktop/")
library(ggplot2)
Noble::gap.vis(site = "DSNY", dpID = "DP1.00001.001", bgn.month = "2017-10", end.month = "2017-12", save.dir = "~/Desktop/")
library(Noble)
Noble::gap.vis(site = "DSNY", dpID = "DP1.00002.001", bgn.month = "2017-10", end.month = "2017-12", save.dir = "~/Desktop/")
Noble::gap.report(site = "DSNY", dpID = "DP1.00001.001", bgn.month = "2017-10", end.month = "2017-12", save.dir = "~/Desktop/")
Noble::gap.report(site = "DSNY", dpID = "DP1.00002.001", bgn.month = "2017-10", end.month = "2017-12", save.dir = "~/Desktop/")
system("open 'smb://rlee:M4mmoth!@eco.neoninternal.org/neon'")
system("open 'smb://rlee:M4mmoth!@eco.neoninternal.org/neon'")
results=read.csv(resultFile)
test <- "TIS GRAPE Fault Rate System Performance"
testSubDir <- "TisGrapeFaultRateSystemPerformance"
if(grepl("darwin", version$os))
{
mount.point<-"/Volumes/neon/" #Mac
}else{
mount.point<-"N:/" #Windows
}
dirCommBase <- paste0(mount.point, "Science/Science Commissioning Archive/SiteAndPayload/")
# should not need to edit these...
myTitle <- paste("TIS Commissioning Test Report:", test, "Assessment")
rmdFile <- paste( testSubDir, ".Rmd", sep="")
testFullDir <- paste(dirCommBase, testSubDir, sep="")
resultFile <- paste0(testFullDir,"/Common/results.csv")
results=read.csv(resultFile)
results=data.frame(results, results$Notes=rep("", length(results[,1])))
results=data.frame(results, Notes=rep("", length(results[,1])))
closeAllConnections()
system("open 'smb://rlee:M4mmoth!@eco.neoninternal.org/neon'")
#grape test workflow:
site="NIWO"
bgn.date = "20171120"
end.date = "20180120"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
#Perform test
sink=lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 60)))
#Make Plots
sink=lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
# clean up lapply output
rm(sink)
library(Noble)
sink=lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
#grape test workflow:
site="NIWO"
bgn.date = "20171001"
end.date = "20171201"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
#Perform test
sink=lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 60)))
#Make Plots
sink=lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
# clean up lapply output
rm(sink)
closeAllConnections()
library(Noble)
#grape test workflow:
site="NIWO"
bgn.date = "20171001"
end.date = "20171201"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
#Perform test
sink=lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 60)))
#Make Plots
sink=lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
# clean up lapply output
rm(sink)
closeAllConnections()
#grape test workflow:
site="BARR"
bgn.date = "20171120"
end.date = "20180120"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
#Perform test
sink=lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 60)))
#Make Plots
sink=lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
# clean up lapply output
rm(sink)
closeAllConnections()
#grape test workflow:
site="NIWO"
bgn.date = "20171120"
end.date = "20180120"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
#Perform test
sink=lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 56)))
#Make Plots
sink=lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
# clean up lapply output
rm(sink)
closeAllConnections()
#grape test workflow:
site="BARR"
bgn.date = "20171120"
end.date = "20180120"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
#Perform test
sink=lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 50)))
#Make Plots
sink=lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
# clean up lapply output
rm(sink)
closeAllConnections()
#grape test workflow:
site="BARR"
bgn.date = "20170320"
end.date = "20180125"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
#Perform test
#sink=lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 50)))
#Make Plots
sink=lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
# clean up lapply output
rm(sink)
closeAllConnections()
#grape test workflow:
site="NIWO"
bgn.date = "20170320"
end.date = "20180125"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
#Perform test
#sink=lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 50)))
#Make Plots
sink=lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
# clean up lapply output
rm(sink)
closeAllConnections()
#grape test workflow:
site="LENO"
bgn.date = "20170320"
end.date = "20180125"
system = "TIS"
dir="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisGrapeFaultRateSystemPerformance/Common/Plots"
#Perform test
#sink=lapply(site, function(x) try(Noble:::.grape.test(bgn.date = bgn.date, end.date = end.date, system = system, test.sites = x, num.grapes = 50)))
#Make Plots
sink=lapply(site, function(x) try(Noble:::.grape.plot(bgn.date = bgn.date, end.date = end.date, system = system, site = x, save.dir = dir)))
Noble:::.grape.num.plot(site = site, system = system, log.dir = dir, save.dir = dir)
# clean up lapply output
rm(sink)
closeAllConnections()
