map=lapply(war_years, function(x) leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = x)), lng = 104.5, lat = 16, zoom = 6))
map=lapply(war_years, function(x) leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = as.character.Date(x)), lng = 104.5, lat = 16, zoom = 6))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31"))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1962-12-31"))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1963-12-31"))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1964-12-31"))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1965-12-31"))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1966-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1967-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1968-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1969-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1970-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1971-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1972-12-31"))
leaflet::setView(map = metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1973-12-31")), lng = 104.5, lat = 16, zoom = 6)
map=lapply(war_years, function(x) leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = as.character.Date(x))), lng = 104.5, lat = 16, zoom = 6))
war_years=as.character(seq.Date(from = as.Date("1960-12-31"), to=as.Date("1973-12-31"), by = "year"))
war_years
map=lapply(war_years, function(x) leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = x)), lng = 104.5, lat = 16, zoom = 6))
war_years=as.character(seq.Date(from = as.Date("1960-12-31"), to=as.Date("1973-12-31"), by = "year"))
map=lapply(war_years,
function(x)
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam",
endDate = x)),
lng = 104.5,
lat = 16,
zoom = 6))
war_years=as.list(as.character(seq.Date(from = as.Date("1960-12-31"), to=as.Date("1973-12-31"), by = "year")))
map=lapply(war_years,
function(x)
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam",
endDate = x)),
lng = 104.5,
lat = 16,
zoom = 6))
war_years=as.list(as.character(seq.Date(from = as.Date("1960-12-31"), to=as.Date("1973-12-31"), by = "year")))
map=lapply(war_years,
function(x)
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam",
endDate = x)),
lng = 104.5,
lat = 16,
zoom = 6
)
)
# Operation popeye
war_years=as.list(as.character(seq.Date(from = as.Date("1960-12-31"), to=as.Date("1973-12-31"), by = "year")))
map=lapply(war_years,
function(x) print(x),
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam",
endDate = x)),
lng = 104.5,
lat = 16,
zoom = 6
)
)
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31"))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1962-12-31"))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1963-12-31"))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1964-12-31"))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1965-12-31"))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1966-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1967-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1968-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1969-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1970-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1971-12-31"))
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1972-12-31"))
leaflet::setView(map = metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1973-12-31")), lng = 104.5, lat = 16, zoom = 6)
map[1]
map=lapply(war_years, function(x) print(x))
class(map[[1]])
map=lapply(war_years,
function(x) print(x),
leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam",
endDate = paste0(x))),
lng = 104.5,
lat = 16,
zoom = 6
)
)
war_years=as.character(seq.Date(from = as.Date("1960-12-31"), to=as.Date("1973-12-31"), by = "year"))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = war_years[1]))
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = as.character(war_years[1])))
war_years[[1]]
as.Date(war_years[1])
metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = as.Date(war_years[1])))
map=leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6)
map+leaflet::addTiles()
map+leaflet::addTiles(map)
map+leaflet::addTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6))
leaflet::addTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6))
?addTiles
leaflet::addTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6), urlTemplate = "//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png")
leaflet::addTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6),options = markerOptions())
library(leaflet)
leaflet::addTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6),options = markerOptions())
leaflet::addTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6), urlTemplate = "//{s}.tile.openstreetmap.org/{z}/{x}/{y}&layers=C.png")
leaflet::addTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6), urlTemplate = "https://www.openstreetmap.org/#map=z/y/x&layers=C")
leaflet::addTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6), urlTemplate = "//{c}.tile.openstreetmap.org/{z}/{x}/{y}.png")
Noble::data.pull(site="COMO", dpID="DP1.20100.001", bgn.month = "2017-06", end.month = "2017-06", time.agr = 30, package = 'basic', save.dir = tempdir())
#Make is_site_config
library(Noble)
TIS=tis_site_config
AIS=ais_site_config
TIS=data.frame(System=rep("TIS", times=length(TIS[,1])), TIS)
AIS=data.frame(System=rep("AIS", times=length(AIS[,1])), AIS)
is_site_config=data.frame(
System=c(TIS$System, AIS$System),
SiteID=c(TIS$SiteID, AIS$SiteID),
Domain=c(TIS$Domain, AIS$Domain),
Site.Type=c(rep(NA, times=length(TIS[,1])), AIS$Site.Type),
Core.Relocatable=c(TIS$Core.Relocatable, AIS$Core.Relocatable)
)
getwd()
save(is_site_config, file = "./data/is_site_config.rda")
Noble::data.pull(site="COMO", dpID="DP1.20100.001", bgn.month = "2017-06", end.month = "2017-06", time.agr = 30, package = 'basic', save.dir = tempdir())
Noble:::.gen.call.df(site="COMO", dpID="DP1.20100.001", bgn.month = "2017-06", end.month = "2017-06", time.agr = 30, package = 'basic')
site="COMO"
dpID="DP1.20100.001"
bgn.month = "2017-06"
end.month = "2017-06"
time.agr = 30
package = 'basic'
bgn_temp <- as.Date(paste0(bgn.month, "-01"), tz="UTC")
end_temp <- as.Date(paste0(end.month, "-01"), tz="UTC")
date_range<-substr(seq.Date(bgn_temp, end_temp, "month"), 0, 7)
site_meta=read_json(paste0("http://data.neonscience.org/api/v0/sites/", site))$data
prod_meta=read_json(paste0("http://data.neonscience.org/api/v0/products/", dpID))$data
site_indx=grep(prod_meta$siteCodes, pattern = site)
if(length(site_indx)==0){
stop(paste0(dpID, " is not currently available at ", site, " via the API."))
}
site_options=data.frame(avail_months=unlist(prod_meta$siteCodes[[site_indx]]$availableMonths), urls=unlist(prod_meta$siteCodes[[site_indx]]$availableDataUrls))
if(length(site_options$avail_months)==0){stop(paste0(dpID, " is missing at ", site))}
all_data_urls <- unlist(unique(site_options$urls))
all_data_urls
url_index<-lapply(date_range, function(x) grep(pattern=x, all_data_urls))
temp_data_urls<-all_data_urls[unlist(url_index)]
if(length(temp_data_urls)==0){stop("Data was missing in specified date range at ", site, ". Check ", dpID, " avalability with NEON.avail")}
api_data<-(lapply(temp_data_urls, function(x) jsonlite::read_json(path = x)))
url_list<-c()
i<-1
for(i in 1:length(api_data)){
tempList<-api_data[[i]]$data$files
listLeng<-length(tempList)
if(listLeng==0){break()}
for(j in 1:listLeng){
url_list<-append(url_list, tempList[[j]]$url)
}
}
url_list=url_list[(!grepl(pattern = "xml", x= url_list))]
exceptions=c("DP1.00005.001", "DP1.00041.001")
if((dpID %in% exceptions)){ #Why, oh why does bio temp have to be different on the API
url_list<-url_list[grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}else{
url_list=url_list[grepl(pattern = paste0(time.agr,"min*"), x= url_list)]
}
url_list<-c()
i<-1
for(i in 1:length(api_data)){
tempList<-api_data[[i]]$data$files
listLeng<-length(tempList)
if(listLeng==0){break()}
for(j in 1:listLeng){
url_list<-append(url_list, tempList[[j]]$url)
}
}
url_list
url_list=url_list[grepl(pattern = paste0(time.agr,"*min*"), x= url_list)]
url_list<-c()
i<-1
for(i in 1:length(api_data)){
tempList<-api_data[[i]]$data$files
listLeng<-length(tempList)
if(listLeng==0){break()}
for(j in 1:listLeng){
url_list<-append(url_list, tempList[[j]]$url)
}
}
url_list=url_list[grepl(pattern = paste0(time.agr,"*min*"), x= url_list)||grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
url_list
url_list=url_list[grepl(pattern = paste0(time.agr,"*min*"), x= url_list)|grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
test=Noble:::.gen.call.df(site="COMO", dpID="DP1.20100.001", bgn.month = "2017-06", end.month = "2017-06", time.agr = 30, package = 'basic')
View(test)
Out=Noble::data.pull(site="COMO", dpID="DP1.20100.001", bgn.month = "2017-06", end.month = "2017-06", time.agr = 30, package = 'basic', save.dir = tempdir())
View(Out)
Noble::is_site_config
Noble::ais_site_config
Out=Noble::data.pull(site="COMO", dpID="DP1.20042.001", bgn.month = "2017-06", end.month = "2017-06", time.agr = 30, package = 'basic', save.dir = tempdir())
Noble::date.extract(data=Out, bgn.date = as.Date("2017-06-10"), end.date = as.Date("2017-06-11"))
?leaflet::addTiles
?leaflet::addProviderTiles
map=leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6)
map+leaflet::addProviderTiles(map=map, provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 5.5), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 5), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 7), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1960-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1962-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1963-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1964-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1965-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
save.image(leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1965-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap"))
save.image(leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1965-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap"), file = "./1965.png")
save.image(leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1965-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap"))
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1960-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1960-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1962-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1963-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1964-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1965-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
install.packages("webshot")
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
install.packages("webshot")
install.packages("webshot")
install.packages("mapview")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1960-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
webshot::mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1960.png")
webshot::webshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1960.png")
library(wbeshot)
library(webshot)
library(mapview)
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1960.png")
webshot::install_phantomjs()
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1960.png")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1961.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1961.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1962-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1962.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1963-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1963.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1964-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1964.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1965-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1965.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1966-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1966.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1967-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1967.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1968-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1968.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1969-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1969.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1910-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1970.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1971-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1961.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1970-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1970.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1971-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1971.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1961-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1961.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Vietnam", endDate = "1972-12-31")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
mapshot(m, file="/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1972.png")
m=leaflet::addProviderTiles(leaflet::setView(map =metScanR::mapSiteFinder(metScanR::siteFinder(country="Thailand")), lng = 104.5, lat = 16, zoom = 6), provider = "Esri.OceanBasemap")
m
png::readPNG("/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1972.png")
1972=png::readPNG("/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1972.png")
I972=png::readPNG("/Users/rlee/Dropbox/GitHub/external-sites/codeDemonstrations/Nam/images/1972.png")
graphics::text.default(10, 10, labels = "1972")
I972+graphics::text.default(10, 10, labels = "1972")
Noble::pull.USCRN.data(timeScale = "subhourly", stationID = "63829", TimeBgn = as.POSIXct("2014-04-01 00:00:01", format="%Y-%m-%d %H:%M:%S", tz="UTC"), TimeEnd = as.POSIXct("2015-02-01 00:00:00", format = "%Y-%m-%d %H:%M:%S", tz="UCT"))
library(data.table)
out=Noble::pull.USCRN.data(timeScale = "subhourly", stationID = "63829", TimeBgn = as.POSIXct("2014-04-01 00:00:01", format="%Y-%m-%d %H:%M:%S", tz="UTC"), TimeEnd = as.POSIXct("2015-02-01 00:00:00", format = "%Y-%m-%d %H:%M:%S", tz="UCT"))
View(out)
View(Noble::tis_site_config)
library(mapview)
getId("FLUXNET")
Noble::fan.test(site="CPER", bgn.month = "2017-07", end.month = "2017-08", save.dir = "Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisFanAspirationSystemPerformance/")
Noble::fan.test(site="CPER", bgn.month = "2017-07", end.month = "2017-08", save.dir = "Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisFanAspirationSystemPerformance/")
list.dirs("Volumes/")
list.dirs("/Volumes/")
list.dirs("/Volumes/")
list.files("/Volumes/")
list.files("/Volumes/neon")
Noble::fan.test(site="CPER", bgn.month = "2017-07", end.month = "2017-08", save.dir = "/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisFanAspirationSystemPerformance/")
#Fan SP test script
# General parameters
bgn.month="2017-07"
end.month="2017-08"
SCA="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisFanAspirationSystemPerformance/"
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC", "DSNY", "LAJA", "GUAN",
"UNDE", "TREE", "UKFS", "KONZ", "KONA", "ORNL", "MLBS", "GRSM", "TALL", "LENO",
"DELA", "WOOD", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES", "CLBJ", "NIWO",
"MOAB",  "SRER", "JORN", "ONAQ", "ABBY", "SJER", "TOOL", "BARR", "HEAL", "DEJU")
sink=lapply(tis_test_sites, function(x) try(Noble::fan.test(site=x, bgn.month = bgn.month, end.month = end.month, save.dir = SCA)))
rm(sink)
list.files(SCA)
list.files(paste0(SCA, "/Common"))
setwd(SCA)
list.dirs("../")
#Fan SP test script
# General parameters
bgn.month="2017-07"
end.month="2017-08"
SCA="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisFanAspirationSystemPerformance/"
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC", "DSNY", "LAJA", "GUAN",
"UNDE", "TREE", "UKFS", "KONZ", "KONA", "ORNL", "MLBS", "GRSM", "TALL", "LENO",
"DELA", "WOOD", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES", "CLBJ", "NIWO",
"MOAB",  "SRER", "JORN", "ONAQ", "ABBY", "SJER", "TOOL", "BARR", "HEAL", "DEJU")
sink=lapply(tis_test_sites, function(x) try(Noble::fan.test(site=x, bgn.month = bgn.month, end.month = end.month, save.dir = SCA)))
rm(sink)
library(Noble)
#Fan SP test script
# General parameters
bgn.month="2017-07"
end.month="2017-08"
SCA="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisFanAspirationSystemPerformance/"
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC", "DSNY", "LAJA", "GUAN",
"UNDE", "TREE", "UKFS", "KONZ", "KONA", "ORNL", "MLBS", "GRSM", "TALL", "LENO",
"DELA", "WOOD", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES", "CLBJ", "NIWO",
"MOAB",  "SRER", "JORN", "ONAQ", "ABBY", "SJER", "TOOL", "BARR", "HEAL", "DEJU")
sink=lapply(tis_test_sites, function(x) try(Noble::fan.test(site=x, bgn.month = bgn.month, end.month = end.month, save.dir = SCA)))
rm(sink)
library(Noble)
#Fan SP test script
# General parameters
bgn.month="2017-07"
end.month="2017-08"
SCA="/Volumes/neon/Science/Science Commissioning Archive/SiteAndPayload/TisFanAspirationSystemPerformance/"
tis_test_sites=c("HARV", "BART", "SERC", "SCBI", "BLAN", "OSBS", "JERC", "DSNY", "LAJA", "GUAN",
"UNDE", "TREE", "UKFS", "KONZ", "KONA", "ORNL", "MLBS", "GRSM", "TALL", "LENO",
"DELA", "WOOD", "NOGP", "DCFS", "STER", "RMNP", "CPER", "OAES", "CLBJ", "NIWO",
"MOAB",  "SRER", "JORN", "ONAQ", "ABBY", "SJER", "TOOL", "BARR", "HEAL", "DEJU")
sink=lapply(tis_test_sites, function(x) try(Noble::fan.test(site=x, bgn.month = bgn.month, end.month = end.month, save.dir = SCA)))
rm(sink)
bgn.month
bgn.month="2017-07"
end.month="2017-08"
dpID="DP1.00006.001"
site="HARV"
time.agr=30
package="basic"
bgn_temp <- as.Date(paste0(bgn.month, "-01"), tz="UTC")
end_temp <- as.Date(paste0(end.month, "-01"), tz="UTC")
date_range<-substr(seq.Date(bgn_temp, end_temp, "month"), 0, 7)
site_meta=read_json(paste0("http://data.neonscience.org/api/v0/sites/", site))$data
prod_meta=read_json(paste0("http://data.neonscience.org/api/v0/products/", dpID))$data
site_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/sites/", site))$data
prod_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/products/", dpID))$data
site_indx=grep(prod_meta$siteCodes, pattern = site)
if(length(site_indx)==0){
stop(paste0(dpID, " is not currently available at ", site, " via the API."))
}
site_options=data.frame(avail_months=unlist(prod_meta$siteCodes[[site_indx]]$availableMonths), urls=unlist(prod_meta$siteCodes[[site_indx]]$availableDataUrls))
if(length(site_options$avail_months)==0){stop(paste0(dpID, " is missing at ", site))}
all_data_urls <- unlist(unique(site_options$urls))
url_index<-lapply(date_range, function(x) grep(pattern=x, all_data_urls))
temp_data_urls<-all_data_urls[unlist(url_index)]
temp_data_urls
api_data<-(lapply(temp_data_urls, function(x) jsonlite::read_json(path = x)))
i<-1
for(i in 1:length(api_data)){
tempList<-api_data[[i]]$data$files
listLeng<-length(tempList)
if(listLeng==0){break()}
for(j in 1:listLeng){
url_list<-append(url_list, tempList[[j]]$url)
}
}
url_list<-c()
i<-1
for(i in 1:length(api_data)){
tempList<-api_data[[i]]$data$files
listLeng<-length(tempList)
if(listLeng==0){break()}
for(j in 1:listLeng){
url_list<-append(url_list, tempList[[j]]$url)
}
}
url_list=url_list[(!grepl(pattern = "xml", x= url_list))]
exceptions=c("DP1.00005.001", "DP1.00041.001")
url_list=url_list[grepl(pattern = paste0(time.agr,"*min*"), x= url_list)|grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
loc_list_temp=stringr::str_extract(string=url_list, pattern = paste0(dpID, "\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d"))
loc_list=stringr::str_sub(loc_list_temp, start = 15, end = 21)
if(all(is.na(loc_list_temp))){
loc_list_temp=stringr::str_extract(string=url_list, pattern ="\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d")
loc_list=stringr::str_sub(loc_list_temp, start = 1, end = 8)
}
dp_list<-rep(dpID, times=length(loc_list))
call.df<-as.data.frame(cbind(url_list, dp_list, loc_list))
call.df<-call.df[order(call.df$dp_list, call.df$url_list),]
call.df=call.df[which(grepl(x=call.df$url_list, pattern=package)),] #Keep only our package type
call.df=call.df[which(grepl(x=call.df$url_list, pattern="\\.csv")),] #Keep only CSVs
call.df=call.df[which(!grepl(x=call.df$url_list, pattern="variables")),] #weed out varaible tables
return(call.df)
View(call.df)
read.csv(call.df$url_list[2])
Noble::data.pull()
library(Noble)
Noble::data.pull(site = "HARV", dpID = "DP1.00006.001", bgn.month = "2017-07", end.month = "2017-08", time.agr = 30, package = "basic", save.dir = tempdir())
Out=Noble::data.pull(site = "HARV", dpID = "DP1.00006.001", bgn.month = "2017-07", end.month = "2017-08", time.agr = 30, package = "basic", save.dir = tempdir())
View(Out)
Out=Noble::data.pull(site = "HARV", dpID = "DP1.00006.001", bgn.month = "2017-07", end.month = "2017-08", time.agr = 5, package = "basic", save.dir = tempdir())
Out
View(Out)
Out=Noble::data.pull(site = "HARV", dpID = "DP1.00006.001", bgn.month = "2017-07", end.month = "2017-08", time.agr = 5, package = "basic", save.dir = tempdir())
bgn.month="2017-07"
bgn.month="2017-07"
end.month="2017-07"
end.month="2017-08"
dpID="DP1.00006.001"
package="basic"
site="HARV"
time.agr=5
bgn_temp <- as.Date(paste0(bgn.month, "-01"), tz="UTC")
end_temp <- as.Date(paste0(end.month, "-01"), tz="UTC")
date_range<-substr(seq.Date(bgn_temp, end_temp, "month"), 0, 7)
site_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/sites/", site))$data
prod_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/products/", dpID))$data
site_indx=grep(prod_meta$siteCodes, pattern = site)
if(length(site_indx)==0){
stop(paste0(dpID, " is not currently available at ", site, " via the API."))
}
site_options=data.frame(avail_months=unlist(prod_meta$siteCodes[[site_indx]]$availableMonths), urls=unlist(prod_meta$siteCodes[[site_indx]]$availableDataUrls))
# Stop if no data
if(length(site_options$avail_months)==0){stop(paste0(dpID, " is missing at ", site))}
all_data_urls <- unlist(unique(site_options$urls))
#construct temporary API call urls
url_index<-lapply(date_range, function(x) grep(pattern=x, all_data_urls))
temp_data_urls<-all_data_urls[unlist(url_index)]
if(length(temp_data_urls)==0){stop("Data was missing in specified date range at ", site, ". Check ", dpID, " avalability with NEON.avail")}
#For found DPs, given the Kpi, pull hosted metadata via API
api_data<-(lapply(temp_data_urls, function(x) jsonlite::read_json(path = x)))
url_list<-c()
i<-1
for(i in 1:length(api_data)){
tempList<-api_data[[i]]$data$files
listLeng<-length(tempList)
if(listLeng==0){break()}
for(j in 1:listLeng){
url_list<-append(url_list, tempList[[j]]$url)
}
}
url_list=url_list[(!grepl(pattern = "xml", x= url_list))]
exceptions=c("DP1.00005.001", "DP1.00041.001")
if((dpID %in% exceptions)){ #Why, oh why does bio temp have to be different on the API
url_list<-url_list[grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}else{
url_list=url_list[grepl(pattern = paste0(time.agr,"*min*"), x= url_list)|grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}
url_list
loc_list_temp=stringr::str_extract(string=url_list, pattern = paste0(dpID, "\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d"))
url_list=url_list[(!grepl(pattern = "xml", x= url_list))]
exceptions=c("DP1.00005.001", "DP1.00041.001")
if((dpID %in% exceptions)){ #Why, oh why does bio temp have to be different on the API
url_list<-url_list[grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}else{
url_list=url_list[grepl(pattern = paste0(time.agr,"*min*"), x= url_list)|grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}
loc_list_temp=stringr::str_extract(string=url_list, pattern = paste0(dpID, "\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d"))
loc_list=stringr::str_sub(loc_list_temp, start = 15, end = 21)
if(all(is.na(loc_list_temp))){
loc_list_temp=stringr::str_extract(string=url_list, pattern ="\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d")
loc_list=stringr::str_sub(loc_list_temp, start = 1, end = 8)
}
dp_list<-rep(dpID, times=length(loc_list))
call.df<-as.data.frame(cbind(url_list, dp_list, loc_list))
call.df
bgn_temp <- as.Date(paste0(bgn.month, "-01"), tz="UTC")
end_temp <- as.Date(paste0(end.month, "-01"), tz="UTC")
date_range<-substr(seq.Date(bgn_temp, end_temp, "month"), 0, 7)
site_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/sites/", site))$data
prod_meta=jsonlite::read_json(paste0("http://data.neonscience.org/api/v0/products/", dpID))$data
site_indx=grep(prod_meta$siteCodes, pattern = site)
if(length(site_indx)==0){
stop(paste0(dpID, " is not currently available at ", site, " via the API."))
}
site_options=data.frame(avail_months=unlist(prod_meta$siteCodes[[site_indx]]$availableMonths), urls=unlist(prod_meta$siteCodes[[site_indx]]$availableDataUrls))
# Stop if no data
if(length(site_options$avail_months)==0){stop(paste0(dpID, " is missing at ", site))}
all_data_urls <- unlist(unique(site_options$urls))
#construct temporary API call urls
url_index<-lapply(date_range, function(x) grep(pattern=x, all_data_urls))
temp_data_urls<-all_data_urls[unlist(url_index)]
if(length(temp_data_urls)==0){stop("Data was missing in specified date range at ", site, ". Check ", dpID, " avalability with NEON.avail")}
#For found DPs, given the Kpi, pull hosted metadata via API
api_data<-(lapply(temp_data_urls, function(x) jsonlite::read_json(path = x)))
url_list<-c()
i<-1
for(i in 1:length(api_data)){
tempList<-api_data[[i]]$data$files
listLeng<-length(tempList)
if(listLeng==0){break()}
for(j in 1:listLeng){
url_list<-append(url_list, tempList[[j]]$url)
}
}
url_list=url_list[(!grepl(pattern = "xml", x= url_list))]
exceptions=c("DP1.00005.001", "DP1.00041.001")
if((dpID %in% exceptions)){ #Why, oh why does bio temp have to be different on the API
url_list<-url_list[grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}else{
url_list=url_list[grepl(pattern = paste0(time.agr,"*min*"), x= url_list)|grepl(pattern = paste0(time.agr, "_min*"), x= url_list)]
}
loc_list_temp=stringr::str_extract(string=url_list, pattern = paste0(dpID, "\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d"))
loc_list=stringr::str_sub(loc_list_temp, start = 15, end = 21)
if(all(is.na(loc_list_temp))){
loc_list_temp=stringr::str_extract(string=url_list, pattern ="\\.\\d\\d\\d\\.\\d\\d\\d\\.\\d\\d\\d")
loc_list=stringr::str_sub(loc_list_temp, start = 1, end = 8)
}
grepl(pattern = paste0(time.agr, "_min*"), x= url_list)
grepl(pattern = paste0(time.agr,"*min*"), x= url_list)
