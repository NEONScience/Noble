annotate(geom = "text", label= paste0("R-squared: ", r_sqr), x=0.5, y = 1.65)+
annotate(geom = "text", label= trendLine, x=0.5, y = 1.68)
library(ggplot2)
ggplot(data = data, aes(x = SQ, y=FI, color=Watershed, shape=Watershed))+
geom_point()+
scale_shape_manual(name="Watershed",
values=shapeList,
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_grey()+
scale_fill_manual(name="Watershed",
values=factor(Watershed),
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_light()+
theme(text=element_text(family="Times New Roman", size=18))+
labs(x="SQ1/(SQ1+SQ2)", y="FI")+
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))+
annotate(geom = "text", label= paste0("R-squared: ", r_sqr), x=0.5, y = 1.65)+
annotate(geom = "text", label= trendLine, x=0.5, y = 1.68)
ggplot(data = data, aes(x = SQ, y=FI, color=Watershed, shape=Watershed))+
geom_point()+
scale_shape_manual(name="Watershed",
values=shapeList,
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_grey()+
scale_fill_manual(name="Watershed",
values=factor(Watershed),
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_light()+
theme(text=element_text(family="Times New Roman", size=18))+
labs(x="SQ1/(SQ1+SQ2)", y="FI")+
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))+
#annotate(geom = "text", label= paste0("R-squared: ", r_sqr), x=0.5, y = 1.65)+
#annotate(geom = "text", label= trendLine, x=0.5, y = 1.68)
dev.off()
ggplot(data = data, aes(x = SQ, y=FI, color=Watershed, shape=Watershed))+
geom_point()+
scale_shape_manual(name="Watershed",
values=shapeList,
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_grey()+
scale_fill_manual(name="Watershed",
values=factor(Watershed),
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_light()+
theme(text=element_text(family="Times New Roman", size=18))+
labs(x="SQ1/(SQ1+SQ2)", y="FI")+
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))
ggplot(data = data, aes(x = SQ, y=FI, color=Watershed, shape=Watershed))+
geom_point()
View(data)
data <- readxl::read_excel("~/Dropbox/Research/Shared Docs for Manuscript/Robert's Plots/tyroTryp.xlsx")
#artinsinal data curation
data$`Date Collected`=as.Date(data$`Date Collected`, format = "%m/%d/%y")
cnames=c(colnames(data), "shape", "color")
#data=data[-which(data$FI<=1.3),]
data=data.frame(data, shape=rep("", times=length(data[,1])))
data=data.frame(data, color=rep("", times=length(data[,1])))
data$shape[data$Watershed=="WS3-T"]=3
data$shape[data$Watershed=="WS4-R"]=7
data$shape[data$Watershed=="EB-R"]=8
data$shape[data$Watershed=="WB-T"]=12
data$color[data$Watershed=="WS3-T"]="#3a8a9e"
data$color[data$Watershed=="WS4-R"]="#3a589e"
data$color[data$Watershed=="EB-R"]="#d64042"
data$color[data$Watershed=="WB-T"]="#d68840"
colnames(data)
colnames(data)=cnames
colnames(data)=cnames
colnames(data)
data <- readxl::read_excel("~/Dropbox/Research/Shared Docs for Manuscript/Robert's Plots/tyroTryp.xlsx")
data$`Date Collected`=as.Date(data$`Date Collected`, format = "%m/%d/%y")
cnames=c(colnames(data), "Fraction", "shape", "color")
data=data.frame(data, Fraction=data[,3](data[,3]+data[,4]))
data=data.frame(data, Fraction=data[,3]/(data[,3]+data[,4]))
data <- readxl::read_excel("~/Dropbox/Research/Shared Docs for Manuscript/Robert's Plots/tyroTryp.xlsx")
#artinsinal data curation
data$`Date Collected`=as.Date(data$`Date Collected`, format = "%m/%d/%y")
cnames=c(colnames(data), "Fraction", "shape", "color")
#data=data[-which(data$FI<=1.3),]
data=data.frame(data, Fraction=data[,3]/(data[,3]+data[,4]))
data=data.frame(data, shape=rep("", times=length(data[,1])))
data=data.frame(data, color=rep("", times=length(data[,1])))
data$shape[data$Watershed=="WS3-T"]=3
data$shape[data$Watershed=="WS4-R"]=7
data$shape[data$Watershed=="EB-R"]=8
data$shape[data$Watershed=="WB-T"]=12
data$color[data$Watershed=="WS3-T"]="#3a8a9e"
data$color[data$Watershed=="WS4-R"]="#3a589e"
data$color[data$Watershed=="EB-R"]="#d64042"
data$color[data$Watershed=="WB-T"]="#d68840"
colnames(data)=cnames
ggplot(data = data, aes(x = `Date Collected`, y=FI, color=Watershed, shape=Watershed))+
geom_point()+
scale_shape_manual(name="Watershed",
values=shapeList,
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_grey()+
scale_fill_manual(name="Watershed",
values=factor(Watershed),
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_light()+
theme(text=element_text(family="Times New Roman", size=18))+
labs(x="SQ1/(SQ1+SQ2)", y="FI")+
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))
ggplot(data = data, aes(x = `Date Collected`, y=Fraction, color=Watershed, shape=Watershed))+
geom_point()+
scale_shape_manual(name="Watershed",
values=shapeList,
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_grey()+
scale_fill_manual(name="Watershed",
values=factor(Watershed),
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_light()+
theme(text=element_text(family="Times New Roman", size=18))+
labs(x="SQ1/(SQ1+SQ2)", y="FI")+
geom_smooth(method = "lm", se=FALSE, color="black", aes(group=1))
ggplot(data = data, aes(x = `Date Collected`, y=Fraction, color=Watershed, shape=Watershed))+
geom_point()+
scale_shape_manual(name="Watershed",
values=shapeList,
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_grey()+
scale_fill_manual(name="Watershed",
values=factor(Watershed),
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_light()+
theme(text=element_text(family="Times New Roman", size=18))+
labs(x="Date Collected", y="Tryptophan/(Tyrosine + Tryptophan")
ggplot(data = data, aes(x = `Date Collected`, y=Fraction, color=Watershed, shape=Watershed))+
geom_point()+
scale_shape_manual(name="Watershed",
values=shapeList,
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_grey()+
scale_fill_manual(name="Watershed",
values=factor(Watershed),
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_light()+
theme(text=element_text(family="Times New Roman", size=18))+
labs(x="Date Collected", y="Tryptophan/(Tyrosine + Tryptophan)")
png(filename = "~/Dropbox/Research/Shared Docs for Manuscript/Robert's Plots/tyroTryp.png", width = 5.75, height = 4, units = "in", res = 600)
ggplot(data = data, aes(x = `Date Collected`, y=Fraction, color=Watershed, shape=Watershed))+
geom_point()+
scale_shape_manual(name="Watershed",
values=shapeList,
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_grey()+
scale_fill_manual(name="Watershed",
values=factor(Watershed),
labels=c("EB-R", "WB-T", "WS3-T", "WS4-R"))+
theme_light()+
theme(text=element_text(family="Times New Roman", size=18))+
labs(x="Date Collected", y="Tryptophan/(Tyrosine + Tryptophan)")
dev.off()
graphics.off()
# Trouble Ticket Script - PQ tests only
pq.dpID="DP1.00001.001"
testSubDir = Noble::tis_pri_vars$pq.sca.folder[Noble::tis_pri_vars$dpID==pq.dpID]
if(grepl("darwin", version$os))
{
mount.point<-"/Volumes/neon/" #Mac
}else{
mount.point<-"N:/" #Windows
}
dirCommBase <- paste0(mount.point, "Science/Science Commissioning Archive/SiteAndPayload/")
testFullDir = paste0(dirCommBase, testSubDir)
resultFile = paste0(testFullDir,"/Common/results.csv")
survey.dir=paste0(testFullDir, "/Common/troubleTickets/")
if(!dir.exists(survey.dir)){dir.create(survey.dir)}
results = data.frame(read.csv(resultFile, header=TRUE), stringsAsFactors = FALSE)
# Important! Only reads the most recent results data per site into the RMD #
siteList = (unique(results$site))
numbSites = as.numeric(length(siteList))
results=results[with(results, order(site, time_performed, data_product)),]
vars=unique(results$variable_tested)
parsed.results=data.frame()
for (k in 1:numbSites) {
siteIndex=grep(pattern = siteList[k], results$site)
siteOnly =results[siteIndex,]
varList = (unique(siteOnly$variable_tested))
for(v in 1:length(varList)){
varOnly=siteOnly[which(siteOnly$variable_tested==varList[v]),]
varOut=varOnly[which.max(as.POSIXct(varOnly$time_performed)),]
parsed.results=rbind(parsed.results, varOut)
}
}
quant.fail=parsed.results[parsed.results$data_quantity<parsed.results$quant_threshold,]
valid.fail=parsed.results[parsed.results$data_validity<parsed.results$valid_threshold&!(parsed.results$site[parsed.results$data_validity<parsed.results$valid_threshold] %in% quant.fail$site),]
quant.sites=unique(quant.fail$site)
#quant.report
for(i in 1:length(quant.sites)){
site=quant.sites[i]
bgn.month=quant.fail$begin_month[quant.fail$site==site][1]
end.month=quant.fail$end_month[quant.fail$site==site][1]
bgn.month=stringr::str_sub(bgn.month, 1, 7)
end.month=stringr::str_sub(end.month, 1, 7)
test.dates=paste0(quant.fail$begin_month[quant.fail$site==site][1], " through ", quant.fail$end_month[quant.fail$site==site][1])
bad.dps=unique(quant.fail$data_product[quant.fail$site==site])
dp.quant=quant.fail$data_quantity[quant.fail$site==site&quant.fail$data_product %in% bad.dps]
dp.string=c()
if(length(bad.dps)>1){
for(i in 1:(length(bad.dps)-1)){
dp.string=paste0(dp.string, bad.dps[i], " (", dp.quant[i], "%), ")
}
dp.string=paste0(dp.string, "and ", bad.dps[length(bad.dps)], " (", dp.quant[length(bad.dps)], "%) were below the testing threshold over the test period (", test.dates, ").")
}else{dp.string=paste0(bad.dps[length(bad.dps)], " (", dp.quant[length(bad.dps)], "%) was below the testing threshold over the test period (", test.dates, ").")}
title=paste0("TIS ", Noble::tis_pri_vars$kpi[Noble::tis_pri_vars$dpID==pq.dpID], " commissioning test anomaly @ ", Noble::tis_site_config$Domain[Noble::tis_site_config$SiteID==site], "-", site, ": Data Quantity insufficient")
blurb=paste0("At ", site, ", commissioning testing resulted in a failure, due to low data quantity. ", dp.string, " Attached are summary figures of data product health, and CSVs showing when gaps in data begin and end.")
stakeholders="rlee, gwirth, jcrow, lmorgan, nvandenhul"
text.out=paste0("TITLE/n/n", title, "/n BODY/n", blurb, "/n STAKEHOLDERS /n", stakeholders)
writeLines(c("TITLE", title, "", "BODY", blurb, "", "STAKEHOLDERS", stakeholders), con= paste0(Noble:::.data.route(site=site, save.dir = survey.dir), "/ticket.txt"))
for(j in 1:length(unique(quant.fail$data_product[quant.fail$site==site]))){
## Clean this up for work in script. add if statement for 2D wind and SAAT
dpID=unique(quant.fail$data_product[quant.fail$site==site])[j]
short.name=Noble::tis_pri_vars$short.name[Noble::tis_pri_vars$dpID==dpID]
data.field=Noble::tis_pri_vars$data.field[dpID==Noble::tis_pri_vars$dpID]
try(Noble:::.pull.n.plot.png(sites.req = site, bgn.month = bgn.month, end.month = end.month, dpID = dpID, save.dir = Noble:::.data.route(site, survey.dir), data.field = data.field))
try(Noble::gap.report(site=site, bgn.month = bgn.month, end.month = end.month, dpID = dpID, save.dir = Noble:::.data.route(site, survey.dir)))
if(dpID=="DP1.00001.001"){
}
if(dpID=="DP1.00002.001"|dpID=="DP1.00003.001"){
try(Noble::air.temp.cnst.plot(site=site, bgn.month = bgn.month, end.month = end.month, save.dir = Noble:::.data.route(site, survey.dir)))
try(Noble::air.temp.plot(site=site, bgn.month = bgn.month, end.month = end.month,save.dir = Noble:::.data.route(site, survey.dir)))
}
try(Noble:::plot.dp.survey(dpID = dpID, save.dir = Noble:::.data.route(site, survey.dir), site = site))
#paste0(site, "_", bgn.month, "-", end.month, "_", short.name, "_NO_DATA.csv")
}
}
# Trouble Ticket Script - PQ tests only
pq.dpID="DP1.00041.001"
testSubDir = Noble::tis_pri_vars$pq.sca.folder[Noble::tis_pri_vars$dpID==pq.dpID]
if(grepl("darwin", version$os))
{
mount.point<-"/Volumes/neon/" #Mac
}else{
mount.point<-"N:/" #Windows
}
dirCommBase <- paste0(mount.point, "Science/Science Commissioning Archive/SiteAndPayload/")
testFullDir = paste0(dirCommBase, testSubDir)
resultFile = paste0(testFullDir,"/Common/results.csv")
survey.dir=paste0(testFullDir, "/Common/troubleTickets/")
if(!dir.exists(survey.dir)){dir.create(survey.dir)}
results = data.frame(read.csv(resultFile, header=TRUE), stringsAsFactors = FALSE)
# Important! Only reads the most recent results data per site into the RMD #
siteList = (unique(results$site))
numbSites = as.numeric(length(siteList))
results=results[with(results, order(site, time_performed, data_product)),]
vars=unique(results$variable_tested)
parsed.results=data.frame()
for (k in 1:numbSites) {
siteIndex=grep(pattern = siteList[k], results$site)
siteOnly =results[siteIndex,]
varList = (unique(siteOnly$variable_tested))
for(v in 1:length(varList)){
varOnly=siteOnly[which(siteOnly$variable_tested==varList[v]),]
varOut=varOnly[which.max(as.POSIXct(varOnly$time_performed)),]
parsed.results=rbind(parsed.results, varOut)
}
}
quant.fail=parsed.results[parsed.results$data_quantity<parsed.results$quant_threshold,]
valid.fail=parsed.results[parsed.results$data_validity<parsed.results$valid_threshold&!(parsed.results$site[parsed.results$data_validity<parsed.results$valid_threshold] %in% quant.fail$site),]
quant.sites=unique(quant.fail$site)
#quant.report
for(i in 1:length(quant.sites)){
site=quant.sites[i]
bgn.month=quant.fail$begin_month[quant.fail$site==site][1]
end.month=quant.fail$end_month[quant.fail$site==site][1]
bgn.month=stringr::str_sub(bgn.month, 1, 7)
end.month=stringr::str_sub(end.month, 1, 7)
test.dates=paste0(quant.fail$begin_month[quant.fail$site==site][1], " through ", quant.fail$end_month[quant.fail$site==site][1])
bad.dps=unique(quant.fail$data_product[quant.fail$site==site])
dp.quant=quant.fail$data_quantity[quant.fail$site==site&quant.fail$data_product %in% bad.dps]
dp.string=c()
if(length(bad.dps)>1){
for(i in 1:(length(bad.dps)-1)){
dp.string=paste0(dp.string, bad.dps[i], " (", dp.quant[i], "%), ")
}
dp.string=paste0(dp.string, "and ", bad.dps[length(bad.dps)], " (", dp.quant[length(bad.dps)], "%) were below the testing threshold over the test period (", test.dates, ").")
}else{dp.string=paste0(bad.dps[length(bad.dps)], " (", dp.quant[length(bad.dps)], "%) was below the testing threshold over the test period (", test.dates, ").")}
title=paste0("TIS ", Noble::tis_pri_vars$kpi[Noble::tis_pri_vars$dpID==pq.dpID], " commissioning test anomaly @ ", Noble::tis_site_config$Domain[Noble::tis_site_config$SiteID==site], "-", site, ": Data Quantity insufficient")
blurb=paste0("At ", site, ", commissioning testing resulted in a failure, due to low data quantity. ", dp.string, " Attached are summary figures of data product health, and CSVs showing when gaps in data begin and end.")
stakeholders="rlee, gwirth, jcrow, lmorgan, nvandenhul"
text.out=paste0("TITLE/n/n", title, "/n BODY/n", blurb, "/n STAKEHOLDERS /n", stakeholders)
writeLines(c("TITLE", title, "", "BODY", blurb, "", "STAKEHOLDERS", stakeholders), con= paste0(Noble:::.data.route(site=site, save.dir = survey.dir), "/ticket.txt"))
for(j in 1:length(unique(quant.fail$data_product[quant.fail$site==site]))){
## Clean this up for work in script. add if statement for 2D wind and SAAT
dpID=unique(quant.fail$data_product[quant.fail$site==site])[j]
short.name=Noble::tis_pri_vars$short.name[Noble::tis_pri_vars$dpID==dpID]
data.field=Noble::tis_pri_vars$data.field[dpID==Noble::tis_pri_vars$dpID]
try(Noble:::.pull.n.plot.png(sites.req = site, bgn.month = bgn.month, end.month = end.month, dpID = dpID, save.dir = Noble:::.data.route(site, survey.dir), data.field = data.field))
try(Noble::gap.report(site=site, bgn.month = bgn.month, end.month = end.month, dpID = dpID, save.dir = Noble:::.data.route(site, survey.dir)))
if(dpID=="DP1.00001.001"){
}
if(dpID=="DP1.00002.001"|dpID=="DP1.00003.001"){
try(Noble::air.temp.cnst.plot(site=site, bgn.month = bgn.month, end.month = end.month, save.dir = Noble:::.data.route(site, survey.dir)))
try(Noble::air.temp.plot(site=site, bgn.month = bgn.month, end.month = end.month,save.dir = Noble:::.data.route(site, survey.dir)))
}
try(Noble:::plot.dp.survey(dpID = dpID, save.dir = Noble:::.data.route(site, survey.dir), site = site))
#paste0(site, "_", bgn.month, "-", end.month, "_", short.name, "_NO_DATA.csv")
}
}
data <- readxl::read_excel("~/Dropbox/Research/Shared Docs for Manuscript/Robert's Plots/BBWM Pie Charts.xlsx")
parafac_data=data.frame(Watershed=c("WB-T", "EB-R", "WS3-T", "WS4-R"), data[,18:30])
colnames(parafac_data)=c("Watershed", colnames(data)[18:30])
data=reshape2::melt(parafac_data, id.vars="Watershed")
data=data.frame(data, color=rep("", times=length(data[,1])))
#Manual color setting
data$color[data$variable=="%C1"]="#f99639"
data$color[data$variable=="%C2 (Q2)"]="#c1b920"
data$color[data$variable=="%C3"]="#76c120"
data$color[data$variable=="%C4 (HQ)"]="#20c169"
data$color[data$variable=="%C5 (SQ1)"]="#20c1af"
data$color[data$variable=="%C6"]="#2091c1"
data$color[data$variable=="%C7 (SQ2)"]="#2051c1"
data$color[data$variable=="%C8 (Tryptophan)"]="#6920c1"
data$color[data$variable=="%C9 (SQ3)"]="#a420c1"
data$color[data$variable=="%C10"]="#c1207c"
data$color[data$variable=="%C11 (Q1)"]="#c12056"
data$color[data$variable=="%C12 (Q3)"]="#c12023"
data$color[data$variable=="%C13 (Tyrosine)"]="#c13320"
data$variable=gsub(pattern = "%", replacement = "", x = data$variable)
png(filename = "~/Dropbox/Research/Shared Docs for Manuscript/Robert's Plots/component_pie_white.png", width = 5.75, height = 4, units = "in", res = 600)
ggplot2::ggplot(data = data, aes(x=factor(1), y=value, fill=factor(variable)))+
geom_col(width = 1, color="white")+
scale_fill_manual(name="Component",
values=unique(data$color),
labels=aes(variable))+
facet_wrap(facets = "Watershed")+
coord_polar(theta = "y")+
theme_void()
dev.off()
graphics.off()
# Trouble Ticket Script - PQ tests only
pq.dpID="DP1.00040.001"
testSubDir = Noble::tis_pri_vars$pq.sca.folder[Noble::tis_pri_vars$dpID==pq.dpID]
if(grepl("darwin", version$os))
{
mount.point<-"/Volumes/neon/" #Mac
}else{
mount.point<-"N:/" #Windows
}
dirCommBase <- paste0(mount.point, "Science/Science Commissioning Archive/SiteAndPayload/")
testFullDir = paste0(dirCommBase, testSubDir)
resultFile = paste0(testFullDir,"/Common/results.csv")
survey.dir=paste0(testFullDir, "/Common/troubleTickets/")
if(!dir.exists(survey.dir)){dir.create(survey.dir)}
results = data.frame(read.csv(resultFile, header=TRUE), stringsAsFactors = FALSE)
# Important! Only reads the most recent results data per site into the RMD #
siteList = (unique(results$site))
numbSites = as.numeric(length(siteList))
results=results[with(results, order(site, time_performed, data_product)),]
vars=unique(results$variable_tested)
parsed.results=data.frame()
for (k in 1:numbSites) {
siteIndex=grep(pattern = siteList[k], results$site)
siteOnly =results[siteIndex,]
varList = (unique(siteOnly$variable_tested))
for(v in 1:length(varList)){
varOnly=siteOnly[which(siteOnly$variable_tested==varList[v]),]
varOut=varOnly[which.max(as.POSIXct(varOnly$time_performed)),]
parsed.results=rbind(parsed.results, varOut)
}
}
quant.fail=parsed.results[parsed.results$data_quantity<parsed.results$quant_threshold,]
valid.fail=parsed.results[parsed.results$data_validity<parsed.results$valid_threshold&!(parsed.results$site[parsed.results$data_validity<parsed.results$valid_threshold] %in% quant.fail$site),]
quant.sites=unique(quant.fail$site)
#quant.report
for(i in 1:length(quant.sites)){
site=quant.sites[i]
bgn.month=quant.fail$begin_month[quant.fail$site==site][1]
end.month=quant.fail$end_month[quant.fail$site==site][1]
bgn.month=stringr::str_sub(bgn.month, 1, 7)
end.month=stringr::str_sub(end.month, 1, 7)
test.dates=paste0(quant.fail$begin_month[quant.fail$site==site][1], " through ", quant.fail$end_month[quant.fail$site==site][1])
bad.dps=unique(quant.fail$data_product[quant.fail$site==site])
dp.quant=quant.fail$data_quantity[quant.fail$site==site&quant.fail$data_product %in% bad.dps]
dp.string=c()
if(length(bad.dps)>1){
for(i in 1:(length(bad.dps)-1)){
dp.string=paste0(dp.string, bad.dps[i], " (", dp.quant[i], "%), ")
}
dp.string=paste0(dp.string, "and ", bad.dps[length(bad.dps)], " (", dp.quant[length(bad.dps)], "%) were below the testing threshold over the test period (", test.dates, ").")
}else{dp.string=paste0(bad.dps[length(bad.dps)], " (", dp.quant[length(bad.dps)], "%) was below the testing threshold over the test period (", test.dates, ").")}
title=paste0("TIS ", Noble::tis_pri_vars$kpi[Noble::tis_pri_vars$dpID==pq.dpID], " commissioning test anomaly @ ", Noble::tis_site_config$Domain[Noble::tis_site_config$SiteID==site], "-", site, ": Data Quantity insufficient")
blurb=paste0("At ", site, ", commissioning testing resulted in a failure, due to low data quantity. ", dp.string, " Attached are summary figures of data product health, and CSVs showing when gaps in data begin and end.")
stakeholders="rlee, gwirth, jcrow, lmorgan, nvandenhul"
text.out=paste0("TITLE/n/n", title, "/n BODY/n", blurb, "/n STAKEHOLDERS /n", stakeholders)
writeLines(c("TITLE", title, "", "BODY", blurb, "", "STAKEHOLDERS", stakeholders), con= paste0(Noble:::.data.route(site=site, save.dir = survey.dir), "/ticket.txt"))
for(j in 1:length(unique(quant.fail$data_product[quant.fail$site==site]))){
## Clean this up for work in script. add if statement for 2D wind and SAAT
dpID=unique(quant.fail$data_product[quant.fail$site==site])[j]
short.name=Noble::tis_pri_vars$short.name[Noble::tis_pri_vars$dpID==dpID]
data.field=Noble::tis_pri_vars$data.field[dpID==Noble::tis_pri_vars$dpID]
try(Noble:::.pull.n.plot.png(sites.req = site, bgn.month = bgn.month, end.month = end.month, dpID = dpID, save.dir = Noble:::.data.route(site, survey.dir), data.field = data.field))
try(Noble::gap.report(site=site, bgn.month = bgn.month, end.month = end.month, dpID = dpID, save.dir = Noble:::.data.route(site, survey.dir)))
if(dpID=="DP1.00001.001"){
}
if(dpID=="DP1.00002.001"|dpID=="DP1.00003.001"){
try(Noble::air.temp.cnst.plot(site=site, bgn.month = bgn.month, end.month = end.month, save.dir = Noble:::.data.route(site, survey.dir)))
try(Noble::air.temp.plot(site=site, bgn.month = bgn.month, end.month = end.month,save.dir = Noble:::.data.route(site, survey.dir)))
}
try(Noble:::plot.dp.survey(dpID = dpID, save.dir = Noble:::.data.route(site, survey.dir), site = site))
#paste0(site, "_", bgn.month, "-", end.month, "_", short.name, "_NO_DATA.csv")
}
}
Noble::NEON.avail()
View(Noble::NEON.avail())
VieW(Noble::tis_pri_vars)
View(Noble::tis_pri_vars)
require(base64enc)
x <- charToRaw("the decoded content, otherwise the number of bytes")
username=fred
username="fred"
password="fred"
raw.string=paste0(username, ":", password)
raw.string=charToRaw(paste0(username, ":", password))
enc.auth=base64enc::base64encode(charToRaw(paste0(username, ":", password)))
??java
username="rlee@neoninc.org"
password="1.380x1023"
require(base64enc)
enc.auth=base64enc::base64encode(charToRaw(paste0(username, ":", password)))
enc.auth
system(command = 'curl -D- -X GET -H "Authorization: Basic cmxlZUBuZW9uaW5jLm9yZzoxLjM4MHgxMDIz" -H "Content-Type: application/json" "https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063"')
command=paste0("curl -D- -X GET -H ", 'Authorization: Basic ', enc.auth, '" -H "Content-Type: application/json" "https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063"')
system(command = command)
command
command=paste0("curl -D- -X GET -H ", '"Authorization: Basic ', enc.auth, '" -H "Content-Type: application/json" "https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063"')
system(command = command)
ticket=jsonlite::read_json(system(command = command))
json
??json
ticket=rjson::fromJSON(system(command = command),)
ticket=rjson::fromJSON(system(command = command))
ticket=system(command = command)
ticket
?system
?httr::POST
httr::POST(url = "https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063", body = NULL)
httr::POST(url="https://neoninc.atlassian.net/rest/api/2/rest/auth/1/session", body = list(username="rlee@neoninc.org", password="1.380x1023", encode="json"))
httr::POST(url="https://neoninc.atlassian.net/rest/api/2/rest/auth/1/session", body = rjson::toJSON(list(username="rlee@neoninc.org", password="1.380x1023")))
httr::POST(url="https://neoninc.atlassian.net/rest/auth/1/session", body = rjson::toJSON(list(username="rlee@neoninc.org", password="1.380x1023")))
httr::POST(url="https://neoninc.atlassian.net/rest/auth/1/session", body = list(username="rlee@neoninc.org", password="1.380x1023"), encode = "json")
httr::POST(url="https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063")
httr::GET(url="https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063")
?GET
test=httr::GET(url="https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063")
test
test$content
test$request
test$headers
test$all_headers
test$headers
test=rjson::fromJSON(httr::GET(url="https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063"))
test=rjson::fromJSON("https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063")
test=jsonlite::read_json("https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063")
test$handle
test
test$status_code
test$url
test$headers
test$cookies
test$content
?javascript
??javascript
base64decode(test$content)
test=jsonlite::read_json("https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063")
test=jsonlite::read_json("https://jira.atlassian.com/rest/api/2/issue/JRACLOUD-34423?expand=names,renderedFields")
test
test=httr::GET(url="https://neoninc.atlassian.net/rest/api/2/dashboard",)
test
test$content
?GET
test=httr::GET(url="https://neoninc.atlassian.net/rest/api/2/dashboard", config = "verbose")
test=curl::curl(url="https://neoninc.atlassian.net/rest/api/2/dashboard")
test
readLines(""https://neoninc.atlassian.net/rest/api/2/dashboard"")
readLines("https://neoninc.atlassian.net/rest/api/2/dashboard")
jsonlite::read_json("https://neoninc.atlassian.net/rest/api/2/dashboard")
3test=jsonlite::read_json("https://neoninc.atlassian.net/rest/api/2/issue/NEON-9999?expand=names,renderedFields")
test=jsonlite::read_json("https://neoninc.atlassian.net/rest/api/2/issue/NEON-9999?expand=names,renderedFields")
httr::POST(url="https://neoninc.atlassian.net/rest/auth/1/session", body = list(username="rlee@neoninc.org", password="1.380x1023"), encode = "json") #This works to login (status 200)
test=jsonlite::read_json("https://neoninc.atlassian.net/rest/api/2/issue/NEON-9999?expand=names,renderedFields")
test=jsonlite::read_json("https://neoninc.atlassian.com/rest/api/2/issue/NEON-9999?expand=names,renderedFields")
httr::POST(url = "https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063", body = NULL)
httr::POST(url = "https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063", body = list(expand="manes"), encoding="json")
httr::POST(url = "https://neoninc.atlassian.net/rest/api/2/issue/12063", body = list(expand="manes"), encoding="json")
httr::get(url = "https://neoninc.atlassian.net/rest/api/2/issue/12063", body = list(expand="manes"), encoding="json")
httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/issue/12063", body = list(expand="manes"), encoding="json")
httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/issue/12063", encoding="json")
httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/issue/12063")
httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063")
library(jsonlite)
read_json(httr::GET(url = "https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063"))
read_json("https://neoninc.atlassian.net/rest/api/2/issue/NEON-12063")
?GET
httr::httr_options()
View(httr::httr_options())
GET("http://google.com/")
library(httr)
GET("http://google.com/")
temp=GET("http://google.com/")
temp$content
temp$handle
utf8ToInt(temp$content)
temp$url
temp$url
temp$status_code
temp$headers
temp$headers$`content-encoding`
temp$headers$p3p
